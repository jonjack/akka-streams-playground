2017-10-17  INFO [LogFlow-akka.actor.default-dispatcher-2] a.e.s.Slf4jLogger - Slf4jLogger started
2017-10-17  INFO [LogFlow-akka.actor.default-dispatcher-3] a.e.s.Slf4jLogger - Slf4jLogger started
2017-10-17  INFO [LogFlow-akka.actor.default-dispatcher-2] a.e.s.Slf4jLogger - Slf4jLogger started
2017-10-17  INFO [LogFlow-akka.actor.default-dispatcher-2] a.e.s.Slf4jLogger - Slf4jLogger started
2017-10-17  INFO [LogFlow-akka.actor.default-dispatcher-2] a.e.s.Slf4jLogger - Slf4jLogger started
2017-10-17  INFO [LogFlow-akka.actor.default-dispatcher-3] a.e.s.Slf4jLogger - Slf4jLogger started
2017-10-17 17:08:00.281UTC INFO [LogFlow-akka.actor.default-dispatcher-4] a.a.ActorSystemImpl - {
    # merge of application.conf @ file:/development/code/jonjack/akka-streams-playground/target/scala-2.12/classes/application.conf: 2,reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 8,reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 5,reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 12,akka-http-version.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/akka-http-version.conf: 1,reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http_2.12/jars/akka-http_2.12-10.0.10.jar!/reference.conf: 8,reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 11,version.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/version.conf: 1
    "akka" : {
        # merge of reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 30,reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 84
        "actor" : {
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 698
            # Additional serialization-bindings that are replacing Java serialization are
            # defined in this section for backwards compatibility reasons. They are included
            # by default but can be excluded for backwards compatibility with Akka 2.4.x. 
            # They can be disabled with enable-additional-serialization-bindings=off.
            "additional-serialization-bindings" : {},
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 676
            # SECURITY BEST-PRACTICE is to disable java serialization for its multiple 
            # known attack surfaces. 
            # 
            # This setting is a short-cut to
            # - using DisabledJavaSerializer instead of JavaSerializer
            # - enable-additional-serialization-bindings = on
            # 
            # Completely disable the use of `akka.serialization.JavaSerialization` by the 
            # Akka Serialization extension, instead DisabledJavaSerializer will 
            # be inserted which will fail explicitly if attempts to use java serialization are made.
            # 
            # The log messages emitted by such serializer SHOULD be be treated as potential 
            # attacks which the serializer prevented, as they MAY indicate an external operator 
            # attempting to send malicious messages intending to use java serialization as attack vector.
            # The attempts are logged with the SECURITY marker.
            # 
            # Please note that this option does not stop you from manually invoking java serialization
            # 
            # The default value for this might be changed to off in future versions of Akka.
            "allow-java-serialization" : "on",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 98
            # Timeout for ActorSystem.actorOf
            "creation-timeout" : "20s",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 622
            "debug" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 639
                # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill et.c.)
                "autoreceive" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 648
                # enable DEBUG logging of subscription changes on the eventStream
                "event-stream" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 645
                # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
                "fsm" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 642
                # enable DEBUG logging of actor lifecycle changes
                "lifecycle" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 636
                # enable function of Actor.loggable(), which is to log any received message
                # at DEBUG level, see the “Testing Actor Systems” section of the Akka
                # Documentation at http://akka.io/docs
                "receive" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 654
                # enable WARN logging of misconfigured routers
                "router-misconfiguration" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 651
                # enable DEBUG logging of unhandled messages
                "unhandled" : "off"
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 517
            "default-blocking-io-dispatcher" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 519
                "executor" : "thread-pool-executor",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 522
                "thread-pool-executor" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 523
                    "fixed-pool-size" : 16
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 520
                "throughput" : 1,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 518
                "type" : "Dispatcher"
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 324
            "default-dispatcher" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 357
                # This will be used if you have set "executor = "affinity-pool-executor""
                # Underlying thread pool implementation is akka.dispatch.affinity.AffinityPool.
                # This executor is classified as "ApiMayChange".
                "affinity-pool-executor" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 412
                    # When using the "akka.dispatch.affinity.FairDistributionHashCache" queue selector
                    # internally the AffinityPool uses two methods to determine which task
                    # queue to allocate a Runnable to:
                    # - map based - maintains a round robin counter and a map of Runnable
                    # hashcodes to queues that they have been associated with. This ensures
                    # maximum fairness in terms of work distribution, meaning that each worker
                    # will get approximately equal amount of mailboxes to execute. This is suitable
                    # in cases where we have a small number of actors that will be scheduled on
                    # the pool and we want to ensure the maximum possible utilization of the
                    # available threads.
                    # - hash based - the task - queue in which the runnable should go is determined
                    # by using an uniformly distributed int to int hash function which uses the
                    # hash code of the Runnable as an input. This is preferred in situations where we
                    # have enough number of distinct actors to ensure statistically uniform
                    # distribution of work across threads or we are ready to sacrifice the
                    # former for the added benefit of avoiding map look-ups.
                    "fair-work-distribution" : {
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 422
                        # The value serves as a threshold which determines the point at which the
                        # pool switches from the first to the second work distribution schemes.
                        # For example, if the value is set to 128, the pool can observe up to
                        # 128 unique actors and schedule their mailboxes using the map based
                        # approach. Once this number is reached the pool switches to hash based
                        # task distribution mode. If the value is set to 0, the map based
                        # work distribution approach is disabled and only the hash based is
                        # used irrespective of the number of unique actors. Valid range is
                        # 0 to 2048 (inclusive)
                        "threshold" : 128
                    },
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 387
                    # Level of CPU time used, on a scale between 1 and 10, during backoff/idle.
                    # The tradeoff is that to have low latency more CPU time must be used to be
                    # able to react quickly on incoming messages or send as fast as possible after
                    # backoff backpressure.
                    # Level 1 strongly prefer low CPU consumption over low latency.
                    # Level 10 strongly prefer low latency over low CPU consumption.
                    "idle-cpu-level" : 5,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 364
                    # The parallelism factor is used to determine thread pool size using the
                    # following formula: ceil(available processors * factor). Resulting size
                    # is then bounded by the parallelism-min and parallelism-max values.
                    "parallelism-factor" : 0.8,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 367
                    # Max number of threads to cap factor-based parallelism number to.
                    "parallelism-max" : 64,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 359
                    # Min number of threads to cap factor-based parallelism number to
                    "parallelism-min" : 4,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 394
                    # FQCN of the akka.dispatch.affinity.QueueSelectorFactory.
                    # The Class of the FQCN must have a public constructor with a
                    # (com.typesafe.config.Config) parameter.
                    # A QueueSelectorFactory create instances of akka.dispatch.affinity.QueueSelector,
                    # that is responsible for determining which task queue a Runnable should be enqueued in.
                    "queue-selector" : "akka.dispatch.affinity.FairDistributionHashCache",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 379
                    # FQCN of the Rejection handler used in the pool.
                    # Must have an empty public constructor and must
                    # implement akka.actor.affinity.RejectionHandlerFactory.
                    "rejection-handler" : "akka.dispatch.affinity.ThrowOnOverflowRejectionHandler",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 374
                    # Each worker in the pool uses a separate bounded MPSC queue. This value
                    # indicates the upper bound of the queue. Whenever an attempt to enqueue
                    # a task is made and the queue does not have capacity to accomodate
                    # the task, the rejection handler created by the rejection handler specified
                    # in "rejection-handler" is invoked.
                    "task-queue-size" : 512
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 509
                # For BalancingDispatcher: If the balancing dispatcher should attempt to
                # schedule idle actors using the same dispatcher when a message comes in,
                # and the dispatchers ExecutorService is not fully busy already.
                "attempt-teamwork" : "on",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 350
                # This will be used if you have set "executor = "default-executor"".
                # If an ActorSystem is created with a given ExecutionContext, this
                # ExecutionContext will be used as the default executor for all
                # dispatchers in the ActorSystem configured with
                # executor = "default-executor". Note that "default-executor"
                # is the default value for executor, and therefore used if not
                # specified otherwise. If no ExecutionContext is given,
                # the executor configured in "fallback" will be used.
                "default-executor" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 351
                    "fallback" : "fork-join-executor"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 340
                # Which kind of ExecutorService to use for this dispatcher
                # Valid options:
                #  - "default-executor" requires a "default-executor" section
                #  - "fork-join-executor" requires a "fork-join-executor" section
                #  - "thread-pool-executor" requires a "thread-pool-executor" section
                #  - "affinity-pool-executor" requires an "affinity-pool-executor" section
                #  - A FQCN of a class extending ExecutorServiceConfigurator
                "executor" : "default-executor",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 428
                # This will be used if you have set "executor = "fork-join-executor""
                # Underlying thread pool implementation is akka.dispatch.forkjoin.ForkJoinPool
                "fork-join-executor" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 435
                    # The parallelism factor is used to determine thread pool size using the
                    # following formula: ceil(available processors * factor). Resulting size
                    # is then bounded by the parallelism-min and parallelism-max values.
                    "parallelism-factor" : 3,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 438
                    # Max number of threads to cap factor-based parallelism number to
                    "parallelism-max" : 64,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 430
                    # Min number of threads to cap factor-based parallelism number to
                    "parallelism-min" : 8,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 442
                    # Setting to "FIFO" to use queue like peeking mode which "poll" or "LIFO" to use stack
                    # like peeking mode which "pop".
                    "task-peeking-mode" : "FIFO"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 514
                # If this dispatcher requires a specific type of mailbox, specify the
                # fully-qualified class name here; the actually created mailbox will
                # be a subtype of this type. The empty string signifies no requirement.
                "mailbox-requirement" : "",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 497
                # How long time the dispatcher will wait for new actors until it shuts down
                "shutdown-timeout" : "1s",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 447
                # This will be used if you have set "executor = "thread-pool-executor""
                # Underlying thread pool implementation is java.util.concurrent.ThreadPoolExecutor
                "thread-pool-executor" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 493
                    # Allow core threads to time out
                    "allow-core-timeout" : "on",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 467
                    # The core-pool-size-factor is used to determine corePoolSize of the 
                    # ThreadPoolExecutor using the following formula: 
                    # ceil(available processors * factor).
                    # Resulting size is then bounded by the core-pool-size-min and
                    # core-pool-size-max values.
                    "core-pool-size-factor" : 3,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 470
                    # Max number of threads to cap factor-based corePoolSize number to
                    "core-pool-size-max" : 64,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 460
                    # Min number of threads to cap factor-based corePoolSize number to
                    "core-pool-size-min" : 8,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 457
                    # Define a fixed thread pool size with this property. The corePoolSize
                    # and the maximumPoolSize of the ThreadPoolExecutor will be set to this
                    # value, if it is defined. Then the other pool-size properties will not
                    # be used. 
                    # 
                    # Valid values are: `off` or a positive integer.
                    "fixed-pool-size" : "off",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 449
                    # Keep alive time for threads
                    "keep-alive-time" : "60s",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 480
                    # The max-pool-size-factor is used to determine maximumPoolSize of the 
                    # ThreadPoolExecutor using the following formula:
                    # ceil(available processors * factor)
                    # The maximumPoolSize will not be less than corePoolSize.
                    # It is only used if using a bounded task queue.
                    "max-pool-size-factor" : 3,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 483
                    # Max number of threads to cap factor-based maximumPoolSize number to
                    "max-pool-size-max" : 64,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 473
                    # Minimum number of threads to cap factor-based maximumPoolSize number to
                    "max-pool-size-min" : 8,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 486
                    # Specifies the bounded capacity of the task queue (< 1 == unbounded)
                    "task-queue-size" : -1,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 490
                    # Specifies which type of task queue will be used, can be "array" or
                    # "linked" (default)
                    "task-queue-type" : "linked"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 501
                # Throughput defines the number of messages that are processed in a batch
                # before the thread is returned to the pool. Set to 1 for as fair as possible.
                "throughput" : 5,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 504
                # Throughput deadline for Dispatcher, set to 0 or negative for no deadline
                "throughput-deadline-time" : "0ms",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 331
                # Must be one of the following
                # Dispatcher, PinnedDispatcher, or a FQCN to a class inheriting
                # MessageDispatcherConfigurator with a public constructor with
                # both com.typesafe.config.Config parameter and
                # akka.dispatch.DispatcherPrerequisites parameters.
                # PinnedDispatcher must be used together with executor=thread-pool-executor.
                "type" : "Dispatcher"
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 527
            "default-mailbox" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 538
                # If the mailbox is bounded then it uses this setting to determine its
                # capacity. The provided value must be positive.
                # NOTICE:
                # Up to version 2.1 the mailbox type was determined based on this setting;
                # this is no longer the case, the type must explicitly be a bounded mailbox.
                "mailbox-capacity" : 1000,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 543
                # If the mailbox is bounded then this is the timeout for enqueueing
                # in case the mailbox is full. Negative values signify infinite
                # timeout, which should be avoided as it bears the risk of dead-lock.
                "mailbox-push-timeout-time" : "10s",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 531
                # FQCN of the MailboxType. The Class of the FQCN must have a public
                # constructor with
                # (akka.actor.ActorSystem.Settings, com.typesafe.config.Config) parameters.
                "mailbox-type" : "akka.dispatch.UnboundedMailbox",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 549
                # For Actor with Stash: The default capacity of the stash.
                # If negative (or zero) then an unbounded stash is used (default)
                # If positive then a bounded stash is used and the capacity is set using
                # the property
                "stash-capacity" : -1
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 138
            "deployment" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 314
                "/IO-DNS/inet-address" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 315
                    "mailbox" : "unbounded",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 317
                    "nr-of-instances" : 4,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 316
                    "router" : "consistent-hashing-pool"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 319
                "/IO-DNS/inet-address/*" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 320
                    "dispatcher" : "akka.actor.default-blocking-io-dispatcher"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 141
                # deployment id pattern - on the format: /parent/child etc.
                "default" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 147
                    # The id of the dispatcher to use for this actor.
                    # If undefined or empty the dispatcher specified in code
                    # (Props.withDispatcher) is used, or default-dispatcher if not
                    # specified at all.
                    "dispatcher" : "",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 155
                    # The id of the mailbox to use for this actor.
                    # If undefined or empty the default mailbox of the configured dispatcher
                    # is used or if there is no mailbox configuration the mailbox specified
                    # in code (Props.withMailbox) is used.
                    # If there is a mailbox defined in the configured dispatcher then that
                    # overrides this setting.
                    "mailbox" : "",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 180
                    # number of children to create in case of a router;
                    # this setting is ignored if routees.paths is given
                    "nr-of-instances" : 1,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 260
                    # Routers with dynamically resizable number of routees based on
                    # performance metrics.
                    # This feature is enabled by including (parts of) this section in
                    # the deployment, cannot be enabled together with default resizer.
                    "optimal-size-exploring-resizer" : {
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 276
                        # Interval between each resize attempt
                        "action-interval" : "5s",
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 289
                        # Probabily of doing an exploration v.s. optmization.
                        "chance-of-exploration" : 0.4,
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 273
                        # probability of doing a ramping down when all routees are busy
                        # during exploration.
                        "chance-of-ramping-down-when-full" : 0.2,
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 280
                        # If the routees have not been fully utilized (i.e. all routees busy)
                        # for such length, the resizer will downsize the pool.
                        "downsize-after-underutilized-for" : "72h",
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 297
                        # When downsizing after a long streak of underutilization, the resizer
                        # will downsize the pool to the highest utiliziation multiplied by a
                        # a downsize rasio. This downsize ratio determines the new pools size
                        # in comparison to the highest utilization.
                        # E.g. if the highest utilization is 10, and the down size ratio
                        # is 0.8, the pool will be downsized to 8
                        "downsize-ratio" : 0.8,
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 262
                        "enabled" : "off",
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 286
                        # Duration exploration, the ratio between the largest step size and
                        # current pool size. E.g. if the current pool size is 50, and the
                        # explore-step-size is 0.1, the maximum pool size change during
                        # exploration will be +- 5
                        "explore-step-size" : 0.1,
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 265
                        # The fewest number of routees the router should ever have.
                        "lower-bound" : 1,
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 301
                        # When optimizing, the resizer only considers the sizes adjacent to the
                        # current size. This number indicates how many adjacent sizes to consider.
                        "optimization-range" : 16,
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 269
                        # The most number of routees the router should ever have.
                        # Must be greater than or equal to lower-bound.
                        "upper-bound" : 10,
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 310
                        # The weight of the latest metric over old metrics when collecting
                        # performance metrics.
                        # E.g. if the last processing speed is 10 millis per message at pool
                        # size 5, and if the new processing speed collected is 6 millis per
                        # message at pool size 5. Given a weight of 0.3, the metrics
                        # representing pool size 5 will be 6 * 0.3 + 10 * 0.7, i.e. 8.8 millis
                        # Obviously, this number should be between 0 and 1.
                        "weight-of-latest-metric" : 0.5
                    },
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 211
                    # Routers with dynamically resizable number of routees; this feature is
                    # enabled by including (parts of) this section in the deployment
                    "resizer" : {
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 249
                        # Fraction of routees to be removed when the resizer reaches the
                        # backoffThreshold.
                        # For example, 0.1 would decrease 10% (rounded up), i.e. if current
                        # capacity is 9 it will request an decrease of 1 routee.
                        "backoff-rate" : 0.1,
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 243
                        # Minimum fraction of busy routees before backing off.
                        # For example, if this is 0.3, then we'll remove some routees only when
                        # less than 30% of routees are busy, i.e. if current capacity is 10 and
                        # 3 are busy then the capacity is unchanged, but if 2 or less are busy
                        # the capacity is decreased.
                        # Use 0.0 or negative to avoid removal of routees.
                        "backoff-threshold" : 0.3,
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 213
                        "enabled" : "off",
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 216
                        # The fewest number of routees the router should ever have.
                        "lower-bound" : 1,
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 253
                        # Number of messages between resize operation.
                        # Use 1 to resize before each message.
                        "messages-per-resize" : 10,
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 230
                        # Threshold used to evaluate if a routee is considered to be busy
                        # (under pressure). Implementation depends on this value (default is 1).
                        # 0:   number of routees currently processing a message.
                        # 1:   number of routees currently processing a message has
                        #      some messages in mailbox.
                        # > 1: number of routees with at least the configured pressure-threshold
                        #      messages in their mailbox. Note that estimating mailbox size of
                        #      default UnboundedMailbox is O(N) operation.
                        "pressure-threshold" : 1,
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 235
                        # Percentage to increase capacity whenever all routees are busy.
                        # For example, 0.2 would increase 20% (rounded up), i.e. if current
                        # capacity is 6 it will request an increase of 2 more routees.
                        "rampup-rate" : 0.2,
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 220
                        # The most number of routees the router should ever have.
                        # Must be greater than or equal to lower-bound.
                        "upper-bound" : 10
                    },
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 193
                    "routees" : {
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 197
                        # Alternatively to giving nr-of-instances you can specify the full
                        # paths of those actors which should be routed to. This setting takes
                        # precedence over nr-of-instances
                        "paths" : []
                    },
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 176
                    # routing (load-balance) scheme to use
                    # - available: "from-code", "round-robin", "random", "smallest-mailbox",
                    #              "scatter-gather", "broadcast"
                    # - or:        Fully qualified class name of the router class.
                    #              The class must extend akka.routing.CustomRouterConfig and
                    #              have a public constructor with com.typesafe.config.Config
                    #              and optional akka.actor.DynamicAccess parameter.
                    # - default is "from-code";
                    # Whether or not an actor is transformed to a Router is decided in code
                    # only (Props.withRouter). The type of router can be overridden in the
                    # configuration; specifying "from-code" means that the values specified
                    # in the code shall be used.
                    # In case of routing, the actors to be routed to can be specified
                    # in several ways:
                    # - nr-of-instances: will create that many children
                    # - routees.paths: will route messages to these paths using ActorSelection,
                    #   i.e. will not create children
                    # - resizer: dynamically resizable number of routees as specified in
                    #   resizer below
                    "router" : "from-code",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 188
                    "tail-chopping-router" : {
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 190
                        # interval is duration between sending message to next routee
                        "interval" : "10 milliseconds"
                    },
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 186
                    # number of virtual nodes per node for consistent-hashing router
                    "virtual-nodes-factor" : 10,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 183
                    # within is the timeout used for routers containing future calls
                    "within" : "5 seconds"
                }
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 725
            # Configuration items which are used by the akka.actor.ActorDSL._ methods
            "dsl" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 741
                # Default timeout to assume for operations like Inbox.receive et al
                "default-timeout" : "5s",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 738
                # Maximum queue size of the actor created by newInbox(); this protects
                # against faulty programs which use select() and consistently miss messages
                "inbox-size" : 1000
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 702
            # Additional serialization-bindings that are replacing Java serialization are
            # defined in this section for backwards compatibility reasons. They are included 
            # by default but can be excluded for backwards compatibility with Akka 2.4.x.
            # They can be disabled with enable-additional-serialization-bindings=off.
            # 
            # This should only be needed for backwards compatibility reasons.
            "enable-additional-serialization-bindings" : "on",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 95
            # The guardian "/user" will use this class to obtain its supervisorStrategy.
            # It needs to be a subclass of akka.actor.SupervisorStrategyConfigurator.
            # In addition to the default there is akka.actor.StoppingSupervisorStrategy.
            "guardian-supervisor-strategy" : "akka.actor.DefaultSupervisorStrategy",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 552
            "mailbox" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 607
                "bounded-control-aware-queue-based" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 621
                    # FQCN of the MailboxType, The Class of the FQCN must have a public
                    # constructor with (akka.actor.ActorSystem.Settings,
                    # com.typesafe.config.Config) parameters.
                    "mailbox-type" : "akka.dispatch.BoundedControlAwareMailbox"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 593
                "bounded-deque-based" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 607
                    # FQCN of the MailboxType, The Class of the FQCN must have a public
                    # constructor with (akka.actor.ActorSystem.Settings,
                    # com.typesafe.config.Config) parameters.
                    "mailbox-type" : "akka.dispatch.BoundedDequeBasedMailbox"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 579
                "bounded-queue-based" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 593
                    # FQCN of the MailboxType, The Class of the FQCN must have a public
                    # constructor with (akka.actor.ActorSystem.Settings,
                    # com.typesafe.config.Config) parameters.
                    "mailbox-type" : "akka.dispatch.BoundedMailbox"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 617
                # The LoggerMailbox will drain all messages in the mailbox
                # when the system is shutdown and deliver them to the StandardOutLogger.
                # Do not change this unless you know what you are doing.
                "logger-queue" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 628
                    "mailbox-type" : "akka.event.LoggerMailboxType"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 559
                # Mapping between message queue semantics and mailbox configurations.
                # Used by akka.dispatch.RequiresMessageQueue[T] to enforce different
                # mailbox types on actors.
                # If your Actor implements RequiresMessageQueue[T], then when you create
                # an instance of that actor its mailbox type will be decided by looking
                # up a mailbox configuration via T in this mapping
                "requirements" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 577
                    "akka.dispatch.BoundedControlAwareMessageQueueSemantics" : "akka.actor.mailbox.bounded-control-aware-queue-based",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 569
                    "akka.dispatch.BoundedDequeBasedMessageQueueSemantics" : "akka.actor.mailbox.bounded-deque-based",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 563
                    "akka.dispatch.BoundedMessageQueueSemantics" : "akka.actor.mailbox.bounded-queue-based",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 573
                    "akka.dispatch.ControlAwareMessageQueueSemantics" : "akka.actor.mailbox.unbounded-control-aware-queue-based",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 565
                    "akka.dispatch.DequeBasedMessageQueueSemantics" : "akka.actor.mailbox.unbounded-deque-based",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 571
                    "akka.dispatch.MultipleConsumerSemantics" : "akka.actor.mailbox.unbounded-queue-based",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 575
                    "akka.dispatch.UnboundedControlAwareMessageQueueSemantics" : "akka.actor.mailbox.unbounded-control-aware-queue-based",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 567
                    "akka.dispatch.UnboundedDequeBasedMessageQueueSemantics" : "akka.actor.mailbox.unbounded-deque-based",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 561
                    "akka.dispatch.UnboundedMessageQueueSemantics" : "akka.actor.mailbox.unbounded-queue-based",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 579
                    "akka.event.LoggerMessageQueueSemantics" : "akka.actor.mailbox.logger-queue"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 600
                "unbounded-control-aware-queue-based" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 614
                    # FQCN of the MailboxType, The Class of the FQCN must have a public
                    # constructor with (akka.actor.ActorSystem.Settings,
                    # com.typesafe.config.Config) parameters.
                    "mailbox-type" : "akka.dispatch.UnboundedControlAwareMailbox"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 586
                "unbounded-deque-based" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 600
                    # FQCN of the MailboxType, The Class of the FQCN must have a public
                    # constructor with (akka.actor.ActorSystem.Settings,
                    # com.typesafe.config.Config) parameters.
                    "mailbox-type" : "akka.dispatch.UnboundedDequeBasedMailbox"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 572
                "unbounded-queue-based" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 586
                    # FQCN of the MailboxType, The Class of the FQCN must have a public
                    # constructor with (akka.actor.ActorSystem.Settings,
                    # com.typesafe.config.Config) parameters.
                    "mailbox-type" : "akka.dispatch.UnboundedMailbox"
                }
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 90
            # Either one of "local", "remote" or "cluster" or the
            # FQCN of the ActorRefProvider to be used; the below is the built-in default,
            # note that "remote" and "cluster" requires the akka-remote and akka-cluster
            # artifacts to be on the classpath.
            "provider" : "local",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 120
            "router" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 120
                # Mapping between ´deployment.router' short names to fully qualified class names
                "type-mapping" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 126
                    "balancing-pool" : "akka.routing.BalancingPool",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 129
                    "broadcast-group" : "akka.routing.BroadcastGroup",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 128
                    "broadcast-pool" : "akka.routing.BroadcastPool",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 135
                    "consistent-hashing-group" : "akka.routing.ConsistentHashingGroup",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 134
                    "consistent-hashing-pool" : "akka.routing.ConsistentHashingPool",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 121
                    "from-code" : "akka.routing.NoRouter",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 125
                    "random-group" : "akka.routing.RandomGroup",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 124
                    "random-pool" : "akka.routing.RandomPool",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 123
                    "round-robin-group" : "akka.routing.RoundRobinGroup",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 122
                    "round-robin-pool" : "akka.routing.RoundRobinPool",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 131
                    "scatter-gather-group" : "akka.routing.ScatterGatherFirstCompletedGroup",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 130
                    "scatter-gather-pool" : "akka.routing.ScatterGatherFirstCompletedPool",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 127
                    "smallest-mailbox-pool" : "akka.routing.SmallestMailboxPool",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 133
                    "tail-chopping-group" : "akka.routing.TailChoppingGroup",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 132
                    "tail-chopping-pool" : "akka.routing.TailChoppingPool"
                }
            },
            # merge of reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 39,reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 681
            # Class to Serializer binding. You only need to specify the name of an
            # interface or abstract base class of the messages. In case of ambiguity it
            # is using the most specific configured class, or giving a warning and
            # choosing the “first” one.
            # 
            # To disable one of the default serializers, assign its class to "none", like
            # "java.io.Serializable" = none
            "serialization-bindings" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 692
                "[B" : "bytes",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 40
                "akka.testkit.JavaSerializable" : "java",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 693
                "java.io.Serializable" : "java"
            },
            # merge of reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 35,reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 719
            # Configuration namespace of serialization identifiers.
            # Each serializer implementation must have an entry in the following format:
            # `akka.actor.serialization-identifiers."FQCN" = ID`
            # where `FQCN` is fully qualified class name of the serializer implementation
            # and `ID` is globally unique serializer identifier number.
            # Identifier values from 0 to 40 are reserved for Akka internal usage.
            "serialization-identifiers" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 731
                "akka.serialization.ByteArraySerializer" : 4,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 730
                "akka.serialization.JavaSerializer" : 1,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 36
                "akka.testkit.TestMessageSerializer" : 23
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 107
            # Serializes and deserializes creators (in Props) to ensure that they can be
            # sent over the network, this is only intended for testing. Purely local deployments
            # as marked with deploy.scope == LocalScope are exempt from verification.
            "serialize-creators" : "off",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 102
            # Serializes and deserializes (non-primitive) messages to ensure immutability,
            # this is only intended for testing.
            "serialize-messages" : "off",
            # merge of reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 31,reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 669
            # Entries for pluggable serializers and their bindings.
            "serializers" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 681
                "bytes" : "akka.serialization.ByteArraySerializer",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 680
                "java" : "akka.serialization.JavaSerializer",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 32
                "test-message-serializer" : "akka.testkit.TestMessageSerializer"
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 114
            "typed" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 116
                # Default timeout for typed actor methods with non-void return type
                "timeout" : "5s"
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 112
            # Timeout for send operations to top-level actors which are in the process
            # of being started. This is only relevant if using a bounded mailbox or the
            # CallingThreadDispatcher for a top-level actor.
            "unstarted-push-timeout" : "10s",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 715
            # Log warnings when the default Java serialization is used to serialize messages.
            # The default serializer uses Java serialization which is not very performant and should not
            # be used in production environments unless you don't care about performance. In that case
            # you can turn this off.
            "warn-about-java-serializer-usage" : "on",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 721
            # To be used with the above warn-about-java-serializer-usage
            # When warn-about-java-serializer-usage = on, and this warn-on-no-serialization-verification = off,
            # warnings are suppressed for classes extending NoSerializationVerificationNeeded
            # to reduce noize.
            "warn-on-no-serialization-verification" : "on"
        },
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1023
        # CoordinatedShutdown is an extension that will perform registered
        # tasks in the order that is defined by the phases. It is started
        # by calling CoordinatedShutdown(system).run(). This can be triggered
        # by different things, for example:
        # - JVM shutdown hook will by default run CoordinatedShutdown
        # - Cluster node will automatically run CoordinatedShutdown when it
        #   sees itself as Exiting
        # - A management console or other application specific command can 
        #   run CoordinatedShutdown
        "coordinated-shutdown" : {
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1036
            # The timeout that will be used for a phase if not specified with 
            # 'timeout' in the phase
            "default-phase-timeout" : "5 s",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1045
            # Exit the JVM (System.exit(0)) in the last phase actor-system-terminate
            # if this is set to 'on'. It is done after termination of the 
            # ActorSystem if terminate-actor-system=on, otherwise it is done 
            # immediately when the last phase is reached.  
            "exit-jvm" : "off",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1051
            # //#coordinated-shutdown-phases
            # CoordinatedShutdown will run the tasks that are added to these
            # phases. The phases can be ordered as a DAG by defining the 
            # dependencies between the phases.  
            # Each phase is defined as a named config section with the
            # following optional properties:
            # - timeout=15s: Override the default-phase-timeout for this phase.
            # - recover=off: If the phase fails the shutdown is aborted
            #                and depending phases will not be executed.
            # depends-on=[]: Run the phase after the given phases
            "phases" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1117
                # Last phase. See terminate-actor-system and exit-jvm above.
                # Don't add phases that depends on this phase because the 
                # dispatcher and scheduler of the ActorSystem have been shutdown. 
                "actor-system-terminate" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1119
                    "depends-on" : [
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1129
                        "before-actor-system-terminate"
                    ],
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1128
                    "timeout" : "10 s"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1110
                # Phase for custom application tasks that are to be run
                # after cluster shutdown and before ActorSystem termination.
                "before-actor-system-terminate" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1111
                    "depends-on" : [
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1121
                        "cluster-shutdown"
                    ]
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1077
                # Phase for custom application tasks that are to be run
                # after service shutdown and before cluster shutdown.
                "before-cluster-shutdown" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1078
                    "depends-on" : [
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1088
                        "service-stop"
                    ]
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1057
                # The first pre-defined phase that applications can add tasks to.
                # Note that more phases can be be added in the application's
                # configuration by overriding this phase with an additional 
                # depends-on.
                "before-service-unbind" : {},
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1093
                # Shutdown cluster singletons
                "cluster-exiting" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1095
                    "depends-on" : [
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1105
                        "cluster-leave"
                    ],
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1104
                    "timeout" : "10 s"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1099
                # Wait until exiting has been completed
                "cluster-exiting-done" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1100
                    "depends-on" : [
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1110
                        "cluster-exiting"
                    ]
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1088
                # Emit the leave command for the node that is shutting down.
                "cluster-leave" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1089
                    "depends-on" : [
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1099
                        "cluster-sharding-shutdown-region"
                    ]
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1082
                # Graceful shutdown of the Cluster Sharding regions.
                "cluster-sharding-shutdown-region" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1084
                    "depends-on" : [
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1094
                        "before-cluster-shutdown"
                    ],
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1093
                    "timeout" : "10 s"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1104
                # Shutdown the cluster extension
                "cluster-shutdown" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1105
                    "depends-on" : [
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1115
                        "cluster-exiting-done"
                    ]
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1066
                # Wait for requests that are in progress to be completed.
                "service-requests-done" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1067
                    "depends-on" : [
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1077
                        "service-unbind"
                    ]
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1071
                # Final shutdown of service endpoints.
                "service-stop" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1072
                    "depends-on" : [
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1082
                        "service-requests-done"
                    ]
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1061
                # Stop accepting new incoming requests in for example HTTP.
                "service-unbind" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1062
                    "depends-on" : [
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1072
                        "before-service-unbind"
                    ]
                }
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1049
            # Run the coordinated shutdown when the JVM process exits, e.g.
            # via kill SIGTERM signal (SIGINT ctrl-c doesn't work).
            "run-by-jvm-shutdown-hook" : "on",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1039
            # Terminate the ActorSystem in the last phase actor-system-terminate.
            "terminate-actor-system" : "on"
        },
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 78
        # Toggles whether threads created by this ActorSystem should be daemons or not
        "daemonic" : "off",
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 75
        # List FQCN of extensions which shall be loaded at actor system startup.
        # Should be on the format: 'extensions = ["foo", "bar"]' etc.
        # See the Akka Documentation for more info about Extensions
        "extensions" : [],
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 13
        # Home directory of Akka, modules in the deploy directory will be loaded
        "home" : "",
        # merge of reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 12,akka-http-version.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/akka-http-version.conf: 1,reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http_2.12/jars/akka-http_2.12-10.0.10.jar!/reference.conf: 8
        "http" : {
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 205
            "client" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 213
                # The time period within which the TCP connecting process must be completed.
                "connecting-timeout" : "10s",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 217
                # The time after which an idle connection will be automatically closed.
                # Set to `infinite` to completely disable idle timeouts.
                "idle-timeout" : "60 s",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 255
                # Enables/disables the logging of unencrypted HTTP traffic to and from the HTTP
                # client for debugging reasons.
                # 
                # Note: Use with care. Logging of unencrypted data traffic may expose secret data.
                # 
                # Incoming and outgoing traffic will be logged in hexdump format. To enable logging,
                # specify the number of bytes to log per chunk of data (the actual chunking depends
                # on implementation details and networking conditions and should be treated as
                # arbitrary).
                # 
                # For logging on the server side, see akka.http.server.log-unencrypted-network-bytes.
                # 
                # `off` : no log messages are produced
                # Int   : determines how many bytes should be logged per data chunk
                "log-unencrypted-network-bytes" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 237
                # Modify to tweak parsing settings on the client-side only.
                "parsing" : {},
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 222
                # The initial size of the buffer to render the request headers in.
                # Can be used for fine-tuning request rendering performance but probably
                # doesn't have to be fiddled with in most applications.
                "request-header-size-hint" : 512,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 226
                # Socket options to set for the listening socket. If a setting is left
                # undefined, it will use whatever the default on the system is.
                "socket-options" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 227
                    "so-receive-buffer-size" : "undefined",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 229
                    "so-reuse-address" : "undefined",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 228
                    "so-send-buffer-size" : "undefined",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 230
                    "so-traffic-class" : "undefined",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 231
                    "tcp-keep-alive" : "undefined",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 233
                    "tcp-no-delay" : "undefined",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 232
                    "tcp-oob-inline" : "undefined"
                },
                # merge of reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 210,akka-http-version.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/akka-http-version.conf: 1
                "user-agent-header" : "akka-http/10.0.10"
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 258
            "host-connection-pool" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 310
                # Modify to tweak client settings for host connection pools only.
                # 
                # IMPORTANT:
                # Please note that this section mirrors `akka.http.client` however is used only for pool-based APIs,
                # such as `Http().superPool` or `Http().singleRequest`.
                "client" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 318
                    # The time period within which the TCP connecting process must be completed.
                    "connecting-timeout" : "10s",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 322
                    # The time after which an idle connection will be automatically closed.
                    # Set to `infinite` to completely disable idle timeouts.
                    "idle-timeout" : "60 s",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 342
                    # IMPORTANT: Please note that this section is replicated in `client` and `server`.
                    "parsing" : {},
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 327
                    # The initial size of the buffer to render the request headers in.
                    # Can be used for fine-tuning request rendering performance but probably
                    # doesn't have to be fiddled with in most applications.
                    "request-header-size-hint" : 512,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 331
                    # Socket options to set for the listening socket. If a setting is left
                    # undefined, it will use whatever the default on the system is.
                    "socket-options" : {
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 332
                        "so-receive-buffer-size" : "undefined",
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 334
                        "so-reuse-address" : "undefined",
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 333
                        "so-send-buffer-size" : "undefined",
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 335
                        "so-traffic-class" : "undefined",
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 336
                        "tcp-keep-alive" : "undefined",
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 338
                        "tcp-no-delay" : "undefined",
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 337
                        "tcp-oob-inline" : "undefined"
                    },
                    # merge of reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 315,akka-http-version.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/akka-http-version.conf: 1
                    "user-agent-header" : "akka-http/10.0.10"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 303
                # The time after which an idle connection pool (without pending requests)
                # will automatically terminate itself. Set to `infinite` to completely disable idle timeouts.
                "idle-timeout" : "30 s",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 261
                # The maximum number of parallel connections that a connection pool to a
                # single host endpoint is allowed to establish. Must be greater than zero.
                "max-connections" : 4,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 281
                # The maximum number of open requests accepted into the pool across all
                # materializations of any of its client flows.
                # Protects against (accidentally) overloading a single pool with too many client flow materializations.
                # Note that with N concurrent materializations the max number of open request in the pool
                # will never exceed N * max-connections * pipelining-limit.
                # Must be a power of 2 and > 0!
                "max-open-requests" : 32,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 273
                # The maximum number of times failed requests are attempted again,
                # (if the request can be safely retried) before giving up and returning an error.
                # Set to zero to completely disable request retries.
                "max-retries" : 5,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 268
                # The minimum number of parallel connections that a pool should keep alive ("hot").
                # If the number of connections is falling below the given threshold, new ones are being spawned.
                # You can use this setting to build a hot pool of "always on" connections.
                # Default is 0, meaning there might be no active connection at given moment.
                # Keep in mind that `min-connections` should be smaller than `max-connections` or equal
                "min-connections" : 0,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 299
                # The maximum number of requests that are dispatched to the target host in
                # batch-mode across a single connection (HTTP pipelining).
                # A setting of 1 disables HTTP pipelining, since only one request per
                # connection can be "in flight" at any time.
                # Set to higher values to enable HTTP pipelining.
                # This value must be > 0.
                # (Note that, independently of this setting, pipelining will never be done
                # on a connection that still has a non-idempotent request in flight.
                # 
                # Before increasing this value, make sure you understand the effects of head-of-line blocking.
                # Using a connection pool, a request may be issued on a connection where a previous
                # long-running request hasn't finished yet. The response to the pipelined requests may then be stuck
                # behind the response of the long-running previous requests on the server. This may introduce an
                # unwanted "coupling" of run time between otherwise unrelated requests.
                # 
                # See http://tools.ietf.org/html/rfc7230#section-6.3.2 for more info.)
                "pipelining-limit" : 1
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 353
            # Modify to tweak default parsing settings.
            # 
            # IMPORTANT:
            # Please note that this sections settings can be overriden by the corresponding settings in:
            # `akka.http.server.parsing`, `akka.http.client.parsing` or `akka.http.host-connection-pool.client.parsing`.
            "parsing" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 395
                # Sets the parsing mode for parsing cookies.
                # The following value are defined:
                # 
                # `rfc6265`: Only RFC6265-compliant cookies are parsed. Surrounding double-quotes are accepted and
                #   automatically removed. Non-compliant cookies are silently discarded.
                # `raw`: Raw parsing allows any non-control character but ';' to appear in a cookie value. There's no further
                #   post-processing applied, so that the resulting value string may contain any number of whitespace, unicode,
                #   double quotes, or '=' characters at any position.
                #   The rules for parsing the cookie name are the same ones from RFC 6265.
                # 
                "cookie-parsing-mode" : "rfc6265",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 416
                # Configures the verbosity with which message (request or response) parsing
                # errors are written to the application log.
                # 
                # Supported settings:
                # `off`   : no log messages are produced
                # `simple`: a condensed single-line message is logged
                # `full`  : the full error details (potentially spanning several lines) are logged
                "error-logging-verbosity" : "full",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 429
                # limits for the number of different values per header type that the
                # header cache will hold
                "header-cache" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 431
                    "Content-MD5" : 0,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 432
                    "Date" : 0,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 433
                    "If-Match" : 0,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 434
                    "If-Modified-Since" : 0,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 435
                    "If-None-Match" : 0,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 436
                    "If-Range" : 0,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 437
                    "If-Unmodified-Since" : 0,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 438
                    "User-Agent" : 32,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 430
                    "default" : 12
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 407
                # Enables/disables the logging of warning messages in case an incoming
                # message (request or response) contains an HTTP header which cannot be
                # parsed into its high-level model class due to incompatible syntax.
                # Note that, independently of this settings, akka-http will accept messages
                # with such headers as long as the message as a whole would still be legal
                # under the HTTP specification even without this header.
                # If a header cannot be parsed into a high-level model instance it will be
                # provided as a `RawHeader`.
                # If logging is enabled it is performed with the configured
                # `error-logging-verbosity`.
                "illegal-header-warnings" : "on",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 425
                # Configures the processing mode when encountering illegal characters in
                # header value of response.
                # 
                # Supported mode:
                # `error`  : default mode, throw an ParsingException and terminate the processing
                # `warn`   : ignore the illegal characters in response header value and log a warning message
                # `ignore` : just ignore the illegal characters in response header value
                "illegal-response-header-value-processing-mode" : "error",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 361
                "max-chunk-ext-length" : 256,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 362
                "max-chunk-size" : "1m",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 373
                # Default maximum content length which should not be exceeded by incoming request entities.
                # Can be changed at runtime (to a higher or lower value) via the `HttpEntity::withSizeLimit` method.
                # Note that it is not necessarily a problem to set this to a high value as all stream operations
                # are always properly backpressured.
                # Nevertheless you might want to apply some limit in order to prevent a single client from consuming
                # an excessive amount of server resources.
                # 
                # Set to `infinite` to completely disable entity length checks. (Even then you can still apply one
                # programmatically via `withSizeLimit`.)
                "max-content-length" : "8m",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 360
                "max-header-count" : 64,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 358
                "max-header-name-length" : 64,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 359
                "max-header-value-length" : "8k",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 356
                "max-method-length" : 16,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 357
                "max-response-reason-length" : 64,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 355
                # The limits for the various parts of the HTTP message parser.
                "max-uri-length" : "2k",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 444
                # Enables/disables inclusion of an Tls-Session-Info header in parsed
                # messages over Tls transports (i.e., HttpRequest on server side and
                # HttpResponse on client side).
                "tls-session-info-header" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 383
                # Sets the strictness mode for parsing request target URIs.
                # The following values are defined:
                # 
                # `strict`: RFC3986-compliant URIs are required,
                #     a 400 response is triggered on violations
                # 
                # `relaxed`: all visible 7-Bit ASCII chars are allowed
                # 
                "uri-parsing-mode" : "strict"
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http_2.12/jars/akka-http_2.12-10.0.10.jar!/reference.conf: 8
            "routing" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http_2.12/jars/akka-http_2.12-10.0.10.jar!/reference.conf: 38
                # The maximum number of bytes per ByteString a decoding directive will produce
                # for an entity data stream.
                "decode-max-bytes-per-chunk" : "1m",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http_2.12/jars/akka-http_2.12-10.0.10.jar!/reference.conf: 17
                # Enables/disables ETag and `If-Modified-Since` support for FileAndResourceDirectives
                "file-get-conditional" : "on",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 80
                # Fully qualified config path which holds the dispatcher configuration
                # to be used by ActorMaterializer when creating Actors for IO operations,
                # such as FileSource, FileSink and others.
                "file-io-dispatcher" : "akka.stream.default-blocking-io-dispatcher",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http_2.12/jars/akka-http_2.12-10.0.10.jar!/reference.conf: 30
                # The maximum size between two requested ranges. Ranges with less space in between will be coalesced.
                # 
                # When multiple ranges are requested, a server may coalesce any of the ranges that overlap or that are separated
                # by a gap that is smaller than the overhead of sending multiple parts, regardless of the order in which the
                # corresponding byte-range-spec appeared in the received Range header field. Since the typical overhead between
                # parts of a multipart/byteranges payload is around 80 bytes, depending on the selected representation's
                # media type and the chosen boundary parameter length, it can be less efficient to transfer many small
                # disjoint parts than it is to transfer the entire selected representation.
                "range-coalescing-threshold" : 80,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http_2.12/jars/akka-http_2.12-10.0.10.jar!/reference.conf: 34
                # The maximum number of allowed ranges per request.
                # Requests with more ranges will be rejected due to DOS suspicion.
                "range-count-limit" : 16,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http_2.12/jars/akka-http_2.12-10.0.10.jar!/reference.conf: 20
                # Enables/disables the rendering of the "rendered by" footer in directory listings
                "render-vanity-footer" : "yes",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http_2.12/jars/akka-http_2.12-10.0.10.jar!/reference.conf: 14
                # Enables/disables the returning of more detailed error messages to the
                # client in the error response
                # Should be disabled for browser-facing APIs due to the risk of XSS attacks
                # and (probably) enabled for internal or non-browser APIs
                # (Note that akka-http will always produce log messages containing the full error details)
                "verbose-error-messages" : "off"
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 14
            "server" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 128
                # The requested maximum length of the queue of incoming connections.
                # If the server is busy and the backlog is full the OS will start dropping
                # SYN-packets and connection attempts may fail. Note, that the backlog
                # size is usually only a maximum size hint for the OS and the OS can
                # restrict the number further based on global limits.
                "backlog" : 100,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 53
                # The time period within which the TCP binding process must be completed.
                "bind-timeout" : "1s",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 138
                # If this setting is empty the server only accepts requests that carry a
                # non-empty `Host` header. Otherwise it responds with `400 Bad Request`.
                # Set to a non-empty value to be used in lieu of a missing or empty `Host`
                # header to make the server accept such requests.
                # Note that the server will never accept HTTP/1.1 request without a `Host`
                # header, i.e. this setting only affects HTTP/1.1 requests with an empty
                # `Host` header as well as HTTP/1.0 requests.
                # Examples: `www.spray.io` or `example.com:8080`
                "default-host-header" : "",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 173
                "http2" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 193
                    # The number of request data bytes the HTTP/2 implementation is allowed to buffer internally per connection. Free
                    # space in this buffer is communicated to the peer using HTTP/2 flow-control messages to backpressure data if it
                    # isn't read fast enough.
                    # 
                    # When there is no backpressure, this amount will limit the amount of in-flight data. It might need to be increased
                    # for high bandwidth-delay-product connections.
                    # 
                    # There is a relation between the `incoming-connection-level-buffer-size` and the `incoming-stream-level-buffer-size`:
                    # If incoming-connection-level-buffer-size < incoming-stream-level-buffer-size * number_of_streams, then
                    # head-of-line blocking is possible between different streams on the same connection.
                    "incoming-connection-level-buffer-size" : "10 MB",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 201
                    # The number of request data bytes the HTTP/2 implementation is allowed to buffer internally per stream. Free space
                    # in this buffer is communicated to the peer using HTTP/2 flow-control messages to backpressure data if it isn't
                    # read fast enough.
                    # 
                    # When there is no backpressure, this amount will limit the amount of in-flight data per stream. It might need to
                    # be increased for high bandwidth-delay-product connections.
                    "incoming-stream-level-buffer-size" : "512kB",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 181
                    # The maximum number of bytes to receive from a request entity in a single chunk.
                    # 
                    # The reasoning to limit that amount (instead of delivering all buffered data for a stream) is that
                    # the amount of data in the internal buffers will drive backpressure and flow control on the HTTP/2 level. Bigger
                    # chunks would mean that the user-level entity reader will have to buffer all that data if it cannot read it in one
                    # go. The implementation would not be able to backpressure further data in that case because it does not know about
                    # this user-level buffer.
                    "request-entity-chunk-size" : "65536 b"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 34
                # The time after which an idle connection will be automatically closed.
                # Set to `infinite` to completely disable idle connection timeouts.
                "idle-timeout" : "60 s",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 66
                # The time period the HTTP server implementation will keep a connection open after
                # all data has been delivered to the network layer. This setting is similar to the SO_LINGER socket option
                # but does not only include the OS-level socket but also covers the Akka IO / Akka Streams network stack.
                # The setting is an extra precaution that prevents clients from keeping open a connection that is
                # already considered completed from the server side.
                # 
                # If the network level buffers (including the Akka Stream / Akka IO networking stack buffers)
                # contains more data than can be transferred to the client in the given time when the server-side considers
                # to be finished with this connection, the client may encounter a connection reset.
                # 
                # Set to 'infinite' to disable automatic connection closure (which will risk to leak connections).
                "linger-timeout" : "1 min",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 171
                # Enables/disables the logging of unencrypted HTTP traffic to and from the HTTP
                # server for debugging reasons.
                # 
                # Note: Use with care. Logging of unencrypted data traffic may expose secret data.
                # 
                # Incoming and outgoing traffic will be logged in hexdump format. To enable logging,
                # specify the number of bytes to log per chunk of data (the actual chunking depends
                # on implementation details and networking conditions and should be treated as
                # arbitrary).
                # 
                # For logging on the client side, see akka.http.client.log-unencrypted-network-bytes.
                # 
                # `off` : no log messages are produced
                # Int   : determines how many bytes should be logged per data chunk
                "log-unencrypted-network-bytes" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 80
                # The maximum number of concurrently accepted connections when using the
                # `Http().bindAndHandle` methods.
                # 
                # This setting doesn't apply to the `Http().bind` method which will still
                # deliver an unlimited backpressured stream of incoming connections.
                # 
                # Note, that this setting limits the number of the connections on a best-effort basis.
                # It does *not* strictly guarantee that the number of established TCP connections will never
                # exceed the limit (but it will be approximately correct) because connection termination happens
                # asynchronously. It also does *not* guarantee that the number of concurrently active handler
                # flow materializations will never exceed the limit for the reason that it is impossible to reliably
                # detect when a materialization has ended.
                "max-connections" : 1024,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 153
                # Modify to tweak parsing settings on the server-side only.
                "parsing" : {},
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 92
                # The maximum number of requests that are accepted (and dispatched to
                # the application) on one single connection before the first request
                # has to be completed.
                # Incoming requests that would cause the pipelining limit to be exceeded
                # are not read from the connections socket so as to build up "back-pressure"
                # to the client via TCP flow control.
                # A setting of 1 disables HTTP pipelining, since only one request per
                # connection can be "open" (i.e. being processed by the application) at any
                # time. Set to higher values to enable HTTP pipelining.
                # This value must be > 0 and <= 1024.
                "pipelining-limit" : 16,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 23
                # "PREVIEW" features that are not yet fully production ready.
                # These flags can can change or be removed between patch releases.
                "preview" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 29
                    # ONLY WORKS WITH `bindAndHandleAsync` (currently)
                    # 
                    # If this setting is enabled AND the akka-http2-support is found 
                    # on the classpath the usual Http().bind... method calls will bind 
                    # using HTTP/2. Please note that you must configure HTTPS while doing so.
                    "enable-http2" : "off"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 100
                # Enables/disables the addition of a `Raw-Request-URI` header holding the
                # original raw request URI as the client has sent it.
                "raw-request-uri-header" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 96
                # Enables/disables the addition of a `Remote-Address` header
                # holding the clients (remote) IP address.
                "remote-address-header" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 50
                # Defines the default time period within which the application has to
                # produce an HttpResponse for any given HttpRequest it received.
                # The timeout begins to run when the *end* of the request has been
                # received, so even potentially long uploads can have a short timeout.
                # Set to `infinite` to completely disable request timeout checking.
                # 
                # Make sure this timeout is smaller than the idle-timeout, otherwise,
                # the idle-timeout will kick in first and reset the TCP connection
                # without a response.
                # 
                # If this setting is not `infinite` the HTTP server layer attaches a
                # `Timeout-Access` header to the request, which enables programmatic
                # customization of the timeout period and timeout response for each
                # request individually.
                "request-timeout" : "20 s",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 121
                # The initial size of the buffer to render the response headers in.
                # Can be used for fine-tuning response rendering performance but probably
                # doesn't have to be fiddled with in most applications.
                "response-header-size-hint" : 512,
                # merge of reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 19,akka-http-version.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/akka-http-version.conf: 1
                "server-header" : "akka-http/10.0.10",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 142
                # Socket options to set for the listening socket. If a setting is left
                # undefined, it will use whatever the default on the system is.
                "socket-options" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 143
                    "so-receive-buffer-size" : "undefined",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 145
                    "so-reuse-address" : "undefined",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 144
                    "so-send-buffer-size" : "undefined",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 146
                    "so-traffic-class" : "undefined",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 147
                    "tcp-keep-alive" : "undefined",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 149
                    "tcp-no-delay" : "undefined",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 148
                    "tcp-oob-inline" : "undefined"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 108
                # Enables/disables automatic handling of HEAD requests.
                # If this setting is enabled the server dispatches HEAD requests as GET
                # requests to the application and automatically strips off all message
                # bodies from outgoing responses.
                # Note that, even when this setting is off the server will never send
                # out message bodies on responses to HEAD requests.
                "transparent-head-requests" : "on",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 116
                # Enables/disables the returning of more detailed error messages to
                # the client in the error response.
                # Should be disabled for browser-facing APIs due to the risk of XSS attacks
                # and (probably) enabled for internal or non-browser APIs.
                # Note that akka-http will always produce log messages containing the full
                # error details.
                "verbose-error-messages" : "off"
            },
            # akka-http-version.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/akka-http-version.conf: 1
            "version" : "10.0.10"
        },
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 774
        "io" : {
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 984
            "dns" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 998
                # Fully qualified config path which holds the dispatcher configuration
                # for the manager and resolver router actors.
                # For actual router configuration see akka.actor.deployment./IO-DNS/*
                "dispatcher" : "akka.actor.default-dispatcher",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 993
                "inet-address" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1018
                    # How often to sweep out expired cache entries.
                    # Note that this interval has nothing to do with TTLs
                    "cache-cleanup-interval" : "120s",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1014
                    "negative-ttl" : "default",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1013
                    # To set the time to cache name resolutions
                    # Possible values:
                    # default: sun.net.InetAddressCachePolicy.get() and getNegative()
                    # forever: cache forever
                    # never: no caching
                    # n [time unit]: positive timeout with unit, for example "30 s"
                    "positive-ttl" : "default",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1005
                    # Must implement akka.io.DnsProvider
                    "provider-object" : "akka.io.InetAddressDnsProvider"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1001
                # Name of the subconfig at path akka.io.dns, see inet-address below
                "resolver" : "inet-address"
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 778
            # By default the select loops run on dedicated threads, hence using a
            # PinnedDispatcher
            "pinned-dispatcher" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 790
                "executor" : "thread-pool-executor",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 791
                "thread-pool-executor" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 791
                    "allow-core-timeout" : "off"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 789
                "type" : "PinnedDispatcher"
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 784
            "tcp" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 816
                # The maximum number of connection that are accepted in one go,
                # higher numbers decrease latency, lower numbers increase fairness on
                # the worker-dispatcher
                "batch-accept-limit" : 10,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 824
                # The maximal number of direct buffers kept in the direct buffer pool for
                # reuse.
                "direct-buffer-pool-limit" : 1000,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 820
                # The number of bytes per direct buffer in the pool used to read or write
                # network data from the kernel.
                "direct-buffer-size" : "128 KiB",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 857
                # Fully qualified config path which holds the dispatcher configuration
                # on which file IO tasks are scheduled
                "file-io-dispatcher" : "akka.actor.default-blocking-io-dispatcher",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 865
                # The maximum number of bytes (or "unlimited") to transfer in one batch
                # when using `WriteFile` command which uses `FileChannel.transferTo` to
                # pipe files to a TCP socket. On some OS like Linux `FileChannel.transferTo`
                # may block for a long time when network IO is faster than file IO.
                # Decreasing the value may improve fairness while increasing may improve
                # throughput.
                "file-io-transferTo-limit" : "512 KiB",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 870
                # The number of times to retry the `finishConnect` call after being notified about
                # OP_CONNECT. Retries are needed if the OP_CONNECT notification doesn't imply that
                # `finishConnect` will succeed, which is the case on Android.
                "finish-connect-retries" : 5,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 853
                # Fully qualified config path which holds the dispatcher configuration
                # for the selector management actors
                "management-dispatcher" : "akka.actor.default-dispatcher",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 806
                # Maximum number of open channels supported by this TCP module; there is
                # no intrinsic general limit, this setting is meant to enable DoS
                # protection by limiting the number of concurrently connected clients.
                # Also note that this is a "soft" limit; in certain cases the implementation
                # will accept a few connections more or a few less than the number configured
                # here. Must be an integer > 0 or "unlimited".
                "max-channels" : 256000,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 836
                # The maximum number of bytes delivered by a `Received` message. Before
                # more data is read from the network the connection actor will try to
                # do other work.
                # The purpose of this setting is to impose a smaller limit than the 
                # configured receive buffer size. When using value 'unlimited' it will
                # try to read all from the receive buffer.
                "max-received-message-size" : "unlimited",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 798
                # The number of selectors to stripe the served channels over; each of
                # these will use one select loop on the selector-dispatcher.
                "nr-of-selectors" : 1,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 828
                # The duration a connection actor waits for a `Register` message from
                # its commander before aborting the connection.
                "register-timeout" : "5s",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 811
                # When trying to assign a new connection to a selector and the chosen
                # selector is at full capacity, retry selector choosing and assignment
                # this many times before giving up
                "selector-association-retries" : 10,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 845
                # Fully qualified config path which holds the dispatcher configuration
                # to be used for running the select() calls in the selectors
                "selector-dispatcher" : "akka.io.pinned-dispatcher",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 841
                # Enable fine grained logging of what goes on inside the implementation.
                # Be aware that this may log more than once per message sent to the actors
                # of the tcp implementation.
                "trace-logging" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 879
                # On Windows connection aborts are not reliably detected unless an OP_READ is
                # registered on the selector _after_ the connection has been reset. This
                # workaround enables an OP_CONNECT which forces the abort to be visible on Windows.
                # Enabling this setting on other platforms than Windows will cause various failures
                # and undefined behavior.
                # Possible values of this key are on, off and auto where auto will enable the
                # workaround if Windows is detected automatically.
                "windows-connection-abort-workaround-enabled" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 849
                # Fully qualified config path which holds the dispatcher configuration
                # for the read/write worker actors
                "worker-dispatcher" : "akka.actor.default-dispatcher"
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 872
            "udp" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 918
                # The maximal number of direct buffers kept in the direct buffer pool for
                # reuse.
                "direct-buffer-pool-limit" : 1000,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 914
                # The number of bytes per direct buffer in the pool used to read or write
                # network data from the kernel.
                "direct-buffer-size" : "128 KiB",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 935
                # Fully qualified config path which holds the dispatcher configuration
                # for the selector management actors
                "management-dispatcher" : "akka.actor.default-dispatcher",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 891
                # Maximum number of open channels supported by this UDP module Generally
                # UDP does not require a large number of channels, therefore it is
                # recommended to keep this setting low.
                "max-channels" : 4096,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 886
                # The number of selectors to stripe the served channels over; each of
                # these will use one select loop on the selector-dispatcher.
                "nr-of-selectors" : 1,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 910
                # The maximum number of datagrams that are read in one go,
                # higher numbers decrease latency, lower numbers increase fairness on
                # the worker-dispatcher
                "receive-throughput" : 3,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 900
                # The select loop can be used in two modes:
                # - setting "infinite" will select without a timeout, hogging a thread
                # - setting a positive timeout will do a bounded select call,
                #   enabling sharing of a single thread between multiple selectors
                #   (in this case you will have to use a different configuration for the
                #   selector-dispatcher, e.g. using "type=Dispatcher" with size 1)
                # - setting it to zero means polling, i.e. calling selectNow()
                "select-timeout" : "infinite",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 905
                # When trying to assign a new connection to a selector and the chosen
                # selector is at full capacity, retry selector choosing and assignment
                # this many times before giving up
                "selector-association-retries" : 10,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 927
                # Fully qualified config path which holds the dispatcher configuration
                # to be used for running the select() calls in the selectors
                "selector-dispatcher" : "akka.io.pinned-dispatcher",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 923
                # Enable fine grained logging of what goes on inside the implementation.
                # Be aware that this may log more than once per message sent to the actors
                # of the tcp implementation.
                "trace-logging" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 931
                # Fully qualified config path which holds the dispatcher configuration
                # for the read/write worker actors
                "worker-dispatcher" : "akka.actor.default-dispatcher"
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 928
            "udp-connected" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 974
                # The maximal number of direct buffers kept in the direct buffer pool for
                # reuse.
                "direct-buffer-pool-limit" : 1000,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 970
                # The number of bytes per direct buffer in the pool used to read or write
                # network data from the kernel.
                "direct-buffer-size" : "128 KiB",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 991
                # Fully qualified config path which holds the dispatcher configuration
                # for the selector management actors
                "management-dispatcher" : "akka.actor.default-dispatcher",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 947
                # Maximum number of open channels supported by this UDP module Generally
                # UDP does not require a large number of channels, therefore it is
                # recommended to keep this setting low.
                "max-channels" : 4096,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 942
                # The number of selectors to stripe the served channels over; each of
                # these will use one select loop on the selector-dispatcher.
                "nr-of-selectors" : 1,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 966
                # The maximum number of datagrams that are read in one go,
                # higher numbers decrease latency, lower numbers increase fairness on
                # the worker-dispatcher
                "receive-throughput" : 3,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 956
                # The select loop can be used in two modes:
                # - setting "infinite" will select without a timeout, hogging a thread
                # - setting a positive timeout will do a bounded select call,
                #   enabling sharing of a single thread between multiple selectors
                #   (in this case you will have to use a different configuration for the
                #   selector-dispatcher, e.g. using "type=Dispatcher" with size 1)
                # - setting it to zero means polling, i.e. calling selectNow()
                "select-timeout" : "infinite",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 961
                # When trying to assign a new connection to a selector and the chosen
                # selector is at full capacity, retry selector choosing and assignment
                # this many times before giving up
                "selector-association-retries" : 10,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 983
                # Fully qualified config path which holds the dispatcher configuration
                # to be used for running the select() calls in the selectors
                "selector-dispatcher" : "akka.io.pinned-dispatcher",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 979
                # Enable fine grained logging of what goes on inside the implementation.
                # Be aware that this may log more than once per message sent to the actors
                # of the tcp implementation.
                "trace-logging" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 987
                # Fully qualified config path which holds the dispatcher configuration
                # for the read/write worker actors
                "worker-dispatcher" : "akka.actor.default-dispatcher"
            }
        },
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 82
        # JVM shutdown, System.exit(-1), in case of a fatal error,
        # such as OutOfMemoryError
        "jvm-exit-on-fatal-error" : "on",
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 70
        "library-extensions" : [],
        # application.conf @ file:/development/code/jonjack/akka-streams-playground/target/scala-2.12/classes/application.conf: 5
        # Logs all config on startup
        "log-config-on-start" : "on",
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 55
        # Log at info level when messages are sent to dead letters.
        # Possible values:
        # on: all dead letters are logged
        # off: no logging of dead letters
        # n: positive integer, number of dead letters that will be logged
        "log-dead-letters" : 10,
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 60
        # Possibility to turn off logging of dead letters while the actor system
        # is shutting down. Logging is only done when enabled by 'log-dead-letters'
        # setting.
        "log-dead-letters-during-shutdown" : "on",
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 34
        # Loggers are created and registered synchronously during ActorSystem
        # start-up, and since they are actors, this timeout is used to bound the
        # waiting time
        "logger-startup-timeout" : "5s",
        # application.conf @ file:/development/code/jonjack/akka-streams-playground/target/scala-2.12/classes/application.conf: 9
        # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
        # to STDOUT)
        "loggers" : [
            # application.conf @ file:/development/code/jonjack/akka-streams-playground/target/scala-2.12/classes/application.conf: 9
            "akka.event.slf4j.Slf4jLogger"
        ],
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 29
        # Specifies the default loggers dispatcher
        "loggers-dispatcher" : "akka.actor.default-dispatcher",
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 26
        # Filter of log events that is used by the LoggingAdapter before 
        # publishing log events to the eventStream. It can perform
        # fine grained filtering based on the log source. The default
        # implementation filters on the `loglevel`.
        # FQCN of the LoggingFilter. The Class of the FQCN must implement 
        # akka.event.LoggingFilter and have a public constructor with
        # (akka.actor.ActorSystem.Settings, akka.event.EventStream) parameters.
        "logging-filter" : "akka.event.DefaultLoggingFilter",
        # application.conf @ file:/development/code/jonjack/akka-streams-playground/target/scala-2.12/classes/application.conf: 14
        # Log level used by the configured loggers (see "loggers") as soon
        # as they have been started; before that, see "stdout-loglevel"
        # Options: OFF, ERROR, WARNING, INFO, DEBUG
        "loglevel" : "INFO",
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 739
        # Used to set the behavior of the scheduler.
        # Changing the default values may change the system behavior drastically so make
        # sure you know what you're doing! See the Scheduler section of the Akka
        # Documentation for more details.
        "scheduler" : {
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 775
            # This setting selects the timer implementation which shall be loaded at
            # system start-up.
            # The class given here must implement the akka.actor.Scheduler interface
            # and offer a public constructor which takes three arguments:
            #  1) com.typesafe.config.Config
            #  2) akka.event.LoggingAdapter
            #  3) java.util.concurrent.ThreadFactory
            "implementation" : "akka.actor.LightArrayRevolverScheduler",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 781
            # When shutting down the scheduler, there will typically be a thread which
            # needs to be stopped, and this timeout determines how long to wait for
            # that to happen. In case of timeout the shutdown of the actor system will
            # proceed without running possibly still enqueued tasks.
            "shutdown-timeout" : "5s",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 759
            # The LightArrayRevolverScheduler is used as the default scheduler in the
            # system. It does not execute the scheduled tasks on exact time, but on every
            # tick, it will run everything that is (over)due. You can increase or decrease
            # the accuracy of the execution timing by specifying smaller or larger tick
            # duration. If you are scheduling a lot of tasks you should consider increasing
            # the ticks per wheel.
            # Note that it might take up to 1 tick to stop the Timer, so setting the
            # tick-duration to a high value will make shutting down the actor system
            # take longer.
            "tick-duration" : "10ms",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 766
            # The timer uses a circular wheel of buckets to store the timer tasks.
            # This should be set such that the majority of scheduled timeouts (for high
            # scheduling frequency) will be shorter than one rotation of the wheel
            # (ticks-per-wheel * ticks-duration)
            # THIS MUST BE A POWER OF TWO!
            "ticks-per-wheel" : 512
        },
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 94
        # configure overrides to ssl-configuration here (to be used by akka-streams, and akka-http – i.e. when serving https connections)
        "ssl-config" : {
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 95
            "protocol" : "TLSv1.2"
        },
        # application.conf @ file:/development/code/jonjack/akka-streams-playground/target/scala-2.12/classes/application.conf: 21
        # Log level for the very basic logger activated during ActorSystem startup.
        # This logger prints the log messages to stdout (System.out).
        # Options: OFF, ERROR, WARNING, INFO, DEBUG
        "stdout-loglevel" : "DEBUG",
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 6
        "stream" : {
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 80
            # Fully qualified config path which holds the dispatcher configuration
            # to be used by ActorMaterializer when creating Actors for IO operations,
            # such as FileSource, FileSink and others.
            "blocking-io-dispatcher" : "akka.stream.default-blocking-io-dispatcher",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 82
            "default-blocking-io-dispatcher" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 84
                "executor" : "thread-pool-executor",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 87
                "thread-pool-executor" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 88
                    "fixed-pool-size" : 16
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 85
                "throughput" : 1,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 83
                "type" : "Dispatcher"
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 9
            # Default materializer settings
            "materializer" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 48
                # Enable automatic fusing of all graphs that are run. For short-lived streams
                # this may cause an initial runtime overhead, but most of the time fusing is
                # desirable since it reduces the number of Actors that are created.
                # Deprecated, since Akka 2.5.0, setting does not have any effect.
                "auto-fusing" : "on",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 65
                "debug" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 73
                    # Enables the fuzzing mode which increases the chance of race conditions
                    # by aggressively reordering events and making certain operations more
                    # concurrent than usual.
                    # This setting is for testing purposes, NEVER enable this in a production
                    # environment!
                    # To get the best results, try combining this setting with a throughput
                    # of 1 on the corresponding dispatchers.
                    "fuzzing-mode" : "off"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 39
                # Enable additional troubleshooting logging at DEBUG log level
                "debug-logging" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 19
                # Fully qualified config path which holds the dispatcher configuration
                # to be used by ActorMaterializer when creating Actors.
                # When this value is left empty, the default-dispatcher will be used.
                "dispatcher" : "",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 12
                # Initial size of buffers used in stream elements
                "initial-input-buffer-size" : 4,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 58
                # Those stream elements which have explicit buffers (like mapAsync, mapAsyncUnordered,
                # buffer, flatMapMerge, Source.actorRef, Source.queue, etc.) will preallocate a fixed
                # buffer upon stream materialization if the requested buffer size is less than this
                # configuration parameter. The default is very high because failing early is better
                # than failing under load.
                # 
                # Buffers sized larger than this will dynamically grow/shrink and consume more memory
                # per element than the fixed size buffers.
                "max-fixed-buffer-size" : 1000000000,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 14
                # Maximum size of buffers used in stream elements
                "max-input-buffer-size" : 16,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 42
                # Maximum number of elements emitted in batch if downstream signals large demand
                "output-burst-limit" : 1000,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 23
                # Cleanup leaked publishers and subscribers when they are not used within a given
                # deadline
                "subscription-timeout" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 31
                    # when the subscription timeout is reached one of the following strategies on
                    # the "stale" publisher:
                    # cancel - cancel it (via `onError` or subscribing to the publisher and
                    #          `cancel()`ing the subscription right away
                    # warn   - log a warning statement about the stale element (then drop the
                    #          reference to it)
                    # noop   - do nothing (not recommended)
                    "mode" : "cancel",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 35
                    # time after which a subscriber / publisher is considered stale and eligible
                    # for cancelation (see `akka.stream.subscription-timeout.mode`)
                    "timeout" : "5s"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 63
                # Maximum number of sync messages that actor can process for stream to substream communication.
                # Parameter allows to interrupt synchronous processing to get upsteam/downstream messages.
                # Allows to accelerate message processing that happening withing same actor but keep system responsive.
                "sync-processing-limit" : 1000
            }
        },
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 9
        "test" : {
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 25
            "calling-thread-dispatcher" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 26
                "type" : "akka.testkit.CallingThreadDispatcherConfigurator"
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 23
            # The timeout that is added as an implicit by DefaultTimeout trait
            "default-timeout" : "5s",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 16
            # duration of EventFilter.intercept waits after the block is finished until
            # all required messages are received
            "filter-leeway" : "3s",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 20
            # duration to wait in expectMsg and friends outside of within() block
            # by default
            "single-expect-default" : "3s",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 12
            # factor by which to scale timeouts during tests, e.g. to account for shared
            # build system load
            "timefactor" : 1
        },
        # version.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/version.conf: 1
        "version" : "2.5.6"
    },
    # system properties
    "awt" : {
        # system properties
        "toolkit" : "sun.lwawt.macosx.LWCToolkit"
    },
    # system properties
    "file" : {
        # system properties
        "encoding" : {
            # system properties
            "pkg" : "sun.io"
        },
        # system properties
        "separator" : "/"
    },
    # system properties
    "ftp" : {
        # system properties
        "nonProxyHosts" : "local|*.local|169.254/16|*.169.254/16"
    },
    # system properties
    "gopherProxySet" : "false",
    # system properties
    "http" : {
        # system properties
        "nonProxyHosts" : "local|*.local|169.254/16|*.169.254/16"
    },
    # system properties
    "java" : {
        # system properties
        "awt" : {
            # system properties
            "graphicsenv" : "sun.awt.CGraphicsEnvironment",
            # system properties
            "printerjob" : "sun.lwawt.macosx.CPrinterJob"
        },
        # system properties
        "class" : {
            # system properties
            "path" : "/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/deploy.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/ext/cldrdata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/ext/dnsns.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/ext/jaccess.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/ext/jfxrt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/ext/localedata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/ext/nashorn.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/ext/sunec.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/ext/zipfs.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/javaws.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/jfxswt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/management-agent.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/plugin.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/lib/ant-javafx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/lib/dt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/lib/javafx-mx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/lib/jconsole.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/lib/packager.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/lib/sa-jdi.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/lib/tools.jar:/development/code/jonjack/akka-streams-playground/target/scala-2.12/classes:/Users/jonjack/.sbt/boot/scala-2.12.3/lib/scala-library.jar:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar:/Users/jonjack/.ivy2/cache/com.typesafe/config/bundles/config-1.3.1.jar:/Users/jonjack/.ivy2/cache/org.reactivestreams/reactive-streams/jars/reactive-streams-1.0.1.jar:/Users/jonjack/.ivy2/cache/org.scala-lang.modules/scala-java8-compat_2.12/bundles/scala-java8-compat_2.12-0.8.0.jar:/Users/jonjack/.ivy2/cache/org.scala-lang.modules/scala-parser-combinators_2.12/bundles/scala-parser-combinators_2.12-1.0.4.jar:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-spray-json_2.12/jars/akka-http-spray-json_2.12-10.0.10.jar:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-testkit_2.12/jars/akka-http-testkit_2.12-10.0.10.jar:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http_2.12/jars/akka-http_2.12-10.0.10.jar:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-parsing_2.12/jars/akka-parsing_2.12-10.0.10.jar:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream-testkit_2.12/jars/akka-stream-testkit_2.12-2.4.19.jar:/Users/jonjack/.ivy2/cache/io.spray/spray-json_2.12/bundles/spray-json_2.12-1.3.3.jar:/Users/jonjack/.ivy2/cache/ch.qos.logback/logback-classic/jars/logback-classic-1.2.3.jar:/Users/jonjack/.ivy2/cache/ch.qos.logback/logback-core/jars/logback-core-1.2.3.jar:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-slf4j_2.12/jars/akka-slf4j_2.12-2.5.6.jar:/Users/jonjack/.ivy2/cache/org.slf4j/slf4j-api/jars/slf4j-api-1.7.25.jar:/Applications/IntelliJ IDEA CE.app/Contents/lib/idea_rt.jar",
            # system properties
            "version" : "52.0"
        },
        # system properties
        "endorsed" : {
            # system properties
            "dirs" : "/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/endorsed"
        },
        # system properties
        "ext" : {
            # system properties
            "dirs" : "/Users/jonjack/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"
        },
        # system properties
        "home" : "/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre",
        # system properties
        "io" : {
            # system properties
            "tmpdir" : "/var/folders/gk/z14mpddx2f77wg459mph_9780000gq/T/"
        },
        # system properties
        "library" : {
            # system properties
            "path" : "/Applications/oracle/product/instantclient_64/11.2.0.4.0:/Users/jonjack/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."
        },
        # system properties
        "runtime" : {
            # system properties
            "name" : "Java(TM) SE Runtime Environment",
            # system properties
            "version" : "1.8.0_131-b11"
        },
        # system properties
        "specification" : {
            # system properties
            "name" : "Java Platform API Specification",
            # system properties
            "vendor" : "Oracle Corporation",
            # system properties
            "version" : "1.8"
        },
        # system properties
        "vendor" : {
            # system properties
            "url" : {
                # system properties
                "bug" : "http://bugreport.sun.com/bugreport/"
            }
        },
        # system properties
        "version" : "1.8.0_131",
        # system properties
        "vm" : {
            # system properties
            "info" : "mixed mode",
            # system properties
            "name" : "Java HotSpot(TM) 64-Bit Server VM",
            # system properties
            "specification" : {
                # system properties
                "name" : "Java Virtual Machine Specification",
                # system properties
                "vendor" : "Oracle Corporation",
                # system properties
                "version" : "1.8"
            },
            # system properties
            "vendor" : "Oracle Corporation",
            # system properties
            "version" : "25.131-b11"
        }
    },
    # system properties
    "line" : {
        # system properties
        "separator" : "\n"
    },
    # system properties
    "os" : {
        # system properties
        "arch" : "x86_64",
        # system properties
        "name" : "Mac OS X",
        # system properties
        "version" : "10.10.3"
    },
    # system properties
    "path" : {
        # system properties
        "separator" : ":"
    },
    # system properties
    "socksNonProxyHosts" : "local|*.local|169.254/16|*.169.254/16",
    # merge of reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 101,reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 4
    # ssl configuration
    # folded in from former ssl-config-akka module
    # ssl configuration
    "ssl-config" : {
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 16
        # Whether revocation lists should be checked, if null, defaults to platform default setting.
        "checkRevocation" : null,
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 128
        # Debug configuration
        "debug" : {
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 131
            # Turn on all debugging
            "all" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 137
            # Turn certpath debugging on
            "certpath" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 155
            # Print hex dump of each handshake message, requires handshake to be true
            "data" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 167
            # Print default SSL initialization
            "defaultctx" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 152
            # Print each handshake message
            "handshake" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 161
            # Print key generation data
            "keygen" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 176
            # Print key manager tracing
            "keymanager" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 140
            # Turn ocsp debugging on
            "ocsp" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 149
            # print raw SSL/TLS packets, requires record to be true
            "packet" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 146
            # hex dump of record plaintext, requires record to be true
            "plaintext" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 182
            # Turn pluggability debugging on
            "pluggability" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 143
            # Enable per-record tracing
            "record" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 164
            # Print session activity
            "session" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 173
            # Print session cache tracing
            "sessioncache" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 134
            # Turn on ssl debugging
            "ssl" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 170
            # Print SSLContext tracing
            "sslctx" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 179
            # Print trust manager tracing
            "trustmanager" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 158
            # Enable verbose handshake message printing, requires handshake to be true
            "verbose" : false
        },
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 10
        # Whether we should use the default JVM SSL configuration or not
        # When false additional configuration will be applied on the context (as configured in ssl-config).
        "default" : false,
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 31
        # The disabled key algorithms
        "disabledKeyAlgorithms" : [
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 31
            "RSA keySize < 2048",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 31
            "DSA keySize < 2048",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 31
            "EC keySize < 224"
        ],
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 28
        # The disabled signature algorithms
        "disabledSignatureAlgorithms" : [
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 28
            "MD2",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 28
            "MD4",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 28
            "MD5"
        ],
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 22
        # The enabled cipher suites. If empty, uses the platform default.
        "enabledCipherSuites" : [],
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 25
        # The enabled protocols. If empty, uses the platform default.
        "enabledProtocols" : [
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 25
            "TLSv1.2",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 25
            "TLSv1.1",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 25
            "TLSv1"
        ],
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 39
        # The hostname verifier class.
        # If non null, should be the fully qualify classname of a class that imlpements HostnameVerifier,
        # otherwise the default will be used
        "hostnameVerifierClass" : null,
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 54
        # Configuration for the key manager
        "keyManager" : {
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 56
            # The key manager algorithm. If empty, uses the platform default.
            "algorithm" : null,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 62
            "prototype" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 62
                # The key stores should look like this
                "stores" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 70
                    # The data for the keystore. Either this must be non null, or path must be non null.
                    "data" : null,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 73
                    # The password for loading the keystore. If null, uses no password.
                    "password" : null,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 67
                    # The path to the keystore file. Either this must be non null, or data must be non null.
                    "path" : null,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 64
                    # The store type. If null, defaults to the platform default store type, ie JKS.
                    "type" : null
                }
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 59
            # The key stores
            "stores" : []
        },
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 102
        "logger" : "com.typesafe.sslconfig.akka.util.AkkaLoggerBridge",
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 100
        # The loose ssl options.  These allow configuring ssl to be more loose about what it accepts,
        # at the cost of introducing potential security issues.
        "loose" : {
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 124
            # Whether any certificate should be accepted or not
            "acceptAnyCertificate" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 109
            # If non null, overrides the platform default for whether legacy hello messsages should be allowed.
            "allowLegacyHelloMessages" : null,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 112
            # If non null, overrides the platform defalut for whether unsafe renegotiation should be allowed.
            "allowUnsafeRenegotiation" : null,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 106
            # Whether weak ciphers should be allowed
            "allowWeakCiphers" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 103
            # Whether weak protocols should be allowed
            "allowWeakProtocols" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 115
            # Whether hostname verification should be disabled
            "disableHostnameVerification" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 121
            # Whether the SNI (Server Name Indication) TLS extension should be disabled
            # This setting MAY be respected by client libraries.
            # 
            # https://tools.ietf.org/html/rfc3546#sectiom-3.1
            "disableSNI" : false
        },
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 13
        # The ssl protocol to use
        "protocol" : "TLSv1.2",
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 19
        # A sequence of URLs for obtaining revocation lists
        "revocationLists" : [],
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 41
        "sslParameters" : {
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 47
            # translates to a setNeedClientAuth / setWantClientAuth calls
            # "default" – leaves the (which for JDK8 means wantClientAuth and needClientAuth are set to false.)
            # "none"    – `setNeedClientAuth(false)`
            # "want"    – `setWantClientAuth(true)`
            # "need"    – `setNeedClientAuth(true)`
            "clientAuth" : "default",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 50
            # protocols (names)
            "protocols" : []
        },
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 77
        "trustManager" : {
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 79
            # The trust manager algorithm. If empty, uses the platform default.
            "algorithm" : null,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 85
            "prototype" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 85
                # The key stores should look like this
                "stores" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 93
                    # The data for the keystore. Either this must be non null, or path must be non null.
                    "data" : null,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 90
                    # The path to the keystore file. Either this must be non null, or data must be non null.
                    "path" : null,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 87
                    # The store type. If null, defaults to the platform default store type, ie JKS.
                    "type" : null
                }
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 82
            # The trust stores
            "stores" : []
        }
    },
    # system properties
    "sun" : {
        # system properties
        "arch" : {
            # system properties
            "data" : {
                # system properties
                "model" : "64"
            }
        },
        # system properties
        "boot" : {
            # system properties
            "class" : {
                # system properties
                "path" : "/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/classes"
            },
            # system properties
            "library" : {
                # system properties
                "path" : "/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib"
            }
        },
        # system properties
        "cpu" : {
            # system properties
            "endian" : "little",
            # system properties
            "isalist" : ""
        },
        # system properties
        "io" : {
            # system properties
            "unicode" : {
                # system properties
                "encoding" : "UnicodeBig"
            }
        },
        # system properties
        "java" : {
            # system properties
            "command" : "streams.LogFlow",
            # system properties
            "launcher" : "SUN_STANDARD"
        },
        # system properties
        "jnu" : {
            # system properties
            "encoding" : "UTF-8"
        },
        # system properties
        "management" : {
            # system properties
            "compiler" : "HotSpot 64-Bit Tiered Compilers"
        },
        # system properties
        "os" : {
            # system properties
            "patch" : {
                # system properties
                "level" : "unknown"
            }
        }
    },
    # system properties
    "user" : {
        # system properties
        "country" : {
            # system properties
            "format" : "GB"
        },
        # system properties
        "dir" : "/development/code/jonjack/akka-streams-playground",
        # system properties
        "home" : "/Users/jonjack",
        # system properties
        "language" : "en",
        # system properties
        "name" : "jonjack",
        # system properties
        "timezone" : ""
    },
    # system properties
    "visualvm" : {
        # system properties
        "id" : "14701335346781"
    }
}

2017-10-17 17:08:00.321UTC INFO [LogFlow-akka.actor.default-dispatcher-3] s.LogFlow$ - TESTI
2017-10-17 17:08:00.321UTC INFO [LogFlow-akka.actor.default-dispatcher-3] c.t.c.i.SimpleConfig - tt
2017-10-17  INFO [LogFlow-akka.actor.default-dispatcher-3] a.e.s.Slf4jLogger - Slf4jLogger started
2017-10-17 17:09:44.026UTC DEBUG[LogFlow-akka.actor.default-dispatcher-3] a.e.EventStream - logger log1-Slf4jLogger started
2017-10-17 17:09:44.027UTC DEBUG[LogFlow-akka.actor.default-dispatcher-3] a.e.EventStream - Default Loggers started
2017-10-17 17:09:44.065UTC INFO [LogFlow-akka.actor.default-dispatcher-2] a.a.ActorSystemImpl - {
    # merge of application.conf @ file:/development/code/jonjack/akka-streams-playground/target/scala-2.12/classes/application.conf: 2,reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 8,reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 5,reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 12,akka-http-version.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/akka-http-version.conf: 1,reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http_2.12/jars/akka-http_2.12-10.0.10.jar!/reference.conf: 8,reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 11,version.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/version.conf: 1
    "akka" : {
        # merge of reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 30,reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 84
        "actor" : {
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 698
            # Additional serialization-bindings that are replacing Java serialization are
            # defined in this section for backwards compatibility reasons. They are included
            # by default but can be excluded for backwards compatibility with Akka 2.4.x. 
            # They can be disabled with enable-additional-serialization-bindings=off.
            "additional-serialization-bindings" : {},
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 676
            # SECURITY BEST-PRACTICE is to disable java serialization for its multiple 
            # known attack surfaces. 
            # 
            # This setting is a short-cut to
            # - using DisabledJavaSerializer instead of JavaSerializer
            # - enable-additional-serialization-bindings = on
            # 
            # Completely disable the use of `akka.serialization.JavaSerialization` by the 
            # Akka Serialization extension, instead DisabledJavaSerializer will 
            # be inserted which will fail explicitly if attempts to use java serialization are made.
            # 
            # The log messages emitted by such serializer SHOULD be be treated as potential 
            # attacks which the serializer prevented, as they MAY indicate an external operator 
            # attempting to send malicious messages intending to use java serialization as attack vector.
            # The attempts are logged with the SECURITY marker.
            # 
            # Please note that this option does not stop you from manually invoking java serialization
            # 
            # The default value for this might be changed to off in future versions of Akka.
            "allow-java-serialization" : "on",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 98
            # Timeout for ActorSystem.actorOf
            "creation-timeout" : "20s",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 622
            "debug" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 639
                # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill et.c.)
                "autoreceive" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 648
                # enable DEBUG logging of subscription changes on the eventStream
                "event-stream" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 645
                # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
                "fsm" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 642
                # enable DEBUG logging of actor lifecycle changes
                "lifecycle" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 636
                # enable function of Actor.loggable(), which is to log any received message
                # at DEBUG level, see the “Testing Actor Systems” section of the Akka
                # Documentation at http://akka.io/docs
                "receive" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 654
                # enable WARN logging of misconfigured routers
                "router-misconfiguration" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 651
                # enable DEBUG logging of unhandled messages
                "unhandled" : "off"
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 517
            "default-blocking-io-dispatcher" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 519
                "executor" : "thread-pool-executor",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 522
                "thread-pool-executor" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 523
                    "fixed-pool-size" : 16
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 520
                "throughput" : 1,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 518
                "type" : "Dispatcher"
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 324
            "default-dispatcher" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 357
                # This will be used if you have set "executor = "affinity-pool-executor""
                # Underlying thread pool implementation is akka.dispatch.affinity.AffinityPool.
                # This executor is classified as "ApiMayChange".
                "affinity-pool-executor" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 412
                    # When using the "akka.dispatch.affinity.FairDistributionHashCache" queue selector
                    # internally the AffinityPool uses two methods to determine which task
                    # queue to allocate a Runnable to:
                    # - map based - maintains a round robin counter and a map of Runnable
                    # hashcodes to queues that they have been associated with. This ensures
                    # maximum fairness in terms of work distribution, meaning that each worker
                    # will get approximately equal amount of mailboxes to execute. This is suitable
                    # in cases where we have a small number of actors that will be scheduled on
                    # the pool and we want to ensure the maximum possible utilization of the
                    # available threads.
                    # - hash based - the task - queue in which the runnable should go is determined
                    # by using an uniformly distributed int to int hash function which uses the
                    # hash code of the Runnable as an input. This is preferred in situations where we
                    # have enough number of distinct actors to ensure statistically uniform
                    # distribution of work across threads or we are ready to sacrifice the
                    # former for the added benefit of avoiding map look-ups.
                    "fair-work-distribution" : {
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 422
                        # The value serves as a threshold which determines the point at which the
                        # pool switches from the first to the second work distribution schemes.
                        # For example, if the value is set to 128, the pool can observe up to
                        # 128 unique actors and schedule their mailboxes using the map based
                        # approach. Once this number is reached the pool switches to hash based
                        # task distribution mode. If the value is set to 0, the map based
                        # work distribution approach is disabled and only the hash based is
                        # used irrespective of the number of unique actors. Valid range is
                        # 0 to 2048 (inclusive)
                        "threshold" : 128
                    },
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 387
                    # Level of CPU time used, on a scale between 1 and 10, during backoff/idle.
                    # The tradeoff is that to have low latency more CPU time must be used to be
                    # able to react quickly on incoming messages or send as fast as possible after
                    # backoff backpressure.
                    # Level 1 strongly prefer low CPU consumption over low latency.
                    # Level 10 strongly prefer low latency over low CPU consumption.
                    "idle-cpu-level" : 5,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 364
                    # The parallelism factor is used to determine thread pool size using the
                    # following formula: ceil(available processors * factor). Resulting size
                    # is then bounded by the parallelism-min and parallelism-max values.
                    "parallelism-factor" : 0.8,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 367
                    # Max number of threads to cap factor-based parallelism number to.
                    "parallelism-max" : 64,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 359
                    # Min number of threads to cap factor-based parallelism number to
                    "parallelism-min" : 4,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 394
                    # FQCN of the akka.dispatch.affinity.QueueSelectorFactory.
                    # The Class of the FQCN must have a public constructor with a
                    # (com.typesafe.config.Config) parameter.
                    # A QueueSelectorFactory create instances of akka.dispatch.affinity.QueueSelector,
                    # that is responsible for determining which task queue a Runnable should be enqueued in.
                    "queue-selector" : "akka.dispatch.affinity.FairDistributionHashCache",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 379
                    # FQCN of the Rejection handler used in the pool.
                    # Must have an empty public constructor and must
                    # implement akka.actor.affinity.RejectionHandlerFactory.
                    "rejection-handler" : "akka.dispatch.affinity.ThrowOnOverflowRejectionHandler",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 374
                    # Each worker in the pool uses a separate bounded MPSC queue. This value
                    # indicates the upper bound of the queue. Whenever an attempt to enqueue
                    # a task is made and the queue does not have capacity to accomodate
                    # the task, the rejection handler created by the rejection handler specified
                    # in "rejection-handler" is invoked.
                    "task-queue-size" : 512
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 509
                # For BalancingDispatcher: If the balancing dispatcher should attempt to
                # schedule idle actors using the same dispatcher when a message comes in,
                # and the dispatchers ExecutorService is not fully busy already.
                "attempt-teamwork" : "on",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 350
                # This will be used if you have set "executor = "default-executor"".
                # If an ActorSystem is created with a given ExecutionContext, this
                # ExecutionContext will be used as the default executor for all
                # dispatchers in the ActorSystem configured with
                # executor = "default-executor". Note that "default-executor"
                # is the default value for executor, and therefore used if not
                # specified otherwise. If no ExecutionContext is given,
                # the executor configured in "fallback" will be used.
                "default-executor" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 351
                    "fallback" : "fork-join-executor"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 340
                # Which kind of ExecutorService to use for this dispatcher
                # Valid options:
                #  - "default-executor" requires a "default-executor" section
                #  - "fork-join-executor" requires a "fork-join-executor" section
                #  - "thread-pool-executor" requires a "thread-pool-executor" section
                #  - "affinity-pool-executor" requires an "affinity-pool-executor" section
                #  - A FQCN of a class extending ExecutorServiceConfigurator
                "executor" : "default-executor",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 428
                # This will be used if you have set "executor = "fork-join-executor""
                # Underlying thread pool implementation is akka.dispatch.forkjoin.ForkJoinPool
                "fork-join-executor" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 435
                    # The parallelism factor is used to determine thread pool size using the
                    # following formula: ceil(available processors * factor). Resulting size
                    # is then bounded by the parallelism-min and parallelism-max values.
                    "parallelism-factor" : 3,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 438
                    # Max number of threads to cap factor-based parallelism number to
                    "parallelism-max" : 64,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 430
                    # Min number of threads to cap factor-based parallelism number to
                    "parallelism-min" : 8,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 442
                    # Setting to "FIFO" to use queue like peeking mode which "poll" or "LIFO" to use stack
                    # like peeking mode which "pop".
                    "task-peeking-mode" : "FIFO"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 514
                # If this dispatcher requires a specific type of mailbox, specify the
                # fully-qualified class name here; the actually created mailbox will
                # be a subtype of this type. The empty string signifies no requirement.
                "mailbox-requirement" : "",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 497
                # How long time the dispatcher will wait for new actors until it shuts down
                "shutdown-timeout" : "1s",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 447
                # This will be used if you have set "executor = "thread-pool-executor""
                # Underlying thread pool implementation is java.util.concurrent.ThreadPoolExecutor
                "thread-pool-executor" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 493
                    # Allow core threads to time out
                    "allow-core-timeout" : "on",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 467
                    # The core-pool-size-factor is used to determine corePoolSize of the 
                    # ThreadPoolExecutor using the following formula: 
                    # ceil(available processors * factor).
                    # Resulting size is then bounded by the core-pool-size-min and
                    # core-pool-size-max values.
                    "core-pool-size-factor" : 3,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 470
                    # Max number of threads to cap factor-based corePoolSize number to
                    "core-pool-size-max" : 64,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 460
                    # Min number of threads to cap factor-based corePoolSize number to
                    "core-pool-size-min" : 8,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 457
                    # Define a fixed thread pool size with this property. The corePoolSize
                    # and the maximumPoolSize of the ThreadPoolExecutor will be set to this
                    # value, if it is defined. Then the other pool-size properties will not
                    # be used. 
                    # 
                    # Valid values are: `off` or a positive integer.
                    "fixed-pool-size" : "off",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 449
                    # Keep alive time for threads
                    "keep-alive-time" : "60s",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 480
                    # The max-pool-size-factor is used to determine maximumPoolSize of the 
                    # ThreadPoolExecutor using the following formula:
                    # ceil(available processors * factor)
                    # The maximumPoolSize will not be less than corePoolSize.
                    # It is only used if using a bounded task queue.
                    "max-pool-size-factor" : 3,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 483
                    # Max number of threads to cap factor-based maximumPoolSize number to
                    "max-pool-size-max" : 64,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 473
                    # Minimum number of threads to cap factor-based maximumPoolSize number to
                    "max-pool-size-min" : 8,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 486
                    # Specifies the bounded capacity of the task queue (< 1 == unbounded)
                    "task-queue-size" : -1,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 490
                    # Specifies which type of task queue will be used, can be "array" or
                    # "linked" (default)
                    "task-queue-type" : "linked"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 501
                # Throughput defines the number of messages that are processed in a batch
                # before the thread is returned to the pool. Set to 1 for as fair as possible.
                "throughput" : 5,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 504
                # Throughput deadline for Dispatcher, set to 0 or negative for no deadline
                "throughput-deadline-time" : "0ms",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 331
                # Must be one of the following
                # Dispatcher, PinnedDispatcher, or a FQCN to a class inheriting
                # MessageDispatcherConfigurator with a public constructor with
                # both com.typesafe.config.Config parameter and
                # akka.dispatch.DispatcherPrerequisites parameters.
                # PinnedDispatcher must be used together with executor=thread-pool-executor.
                "type" : "Dispatcher"
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 527
            "default-mailbox" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 538
                # If the mailbox is bounded then it uses this setting to determine its
                # capacity. The provided value must be positive.
                # NOTICE:
                # Up to version 2.1 the mailbox type was determined based on this setting;
                # this is no longer the case, the type must explicitly be a bounded mailbox.
                "mailbox-capacity" : 1000,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 543
                # If the mailbox is bounded then this is the timeout for enqueueing
                # in case the mailbox is full. Negative values signify infinite
                # timeout, which should be avoided as it bears the risk of dead-lock.
                "mailbox-push-timeout-time" : "10s",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 531
                # FQCN of the MailboxType. The Class of the FQCN must have a public
                # constructor with
                # (akka.actor.ActorSystem.Settings, com.typesafe.config.Config) parameters.
                "mailbox-type" : "akka.dispatch.UnboundedMailbox",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 549
                # For Actor with Stash: The default capacity of the stash.
                # If negative (or zero) then an unbounded stash is used (default)
                # If positive then a bounded stash is used and the capacity is set using
                # the property
                "stash-capacity" : -1
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 138
            "deployment" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 314
                "/IO-DNS/inet-address" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 315
                    "mailbox" : "unbounded",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 317
                    "nr-of-instances" : 4,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 316
                    "router" : "consistent-hashing-pool"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 319
                "/IO-DNS/inet-address/*" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 320
                    "dispatcher" : "akka.actor.default-blocking-io-dispatcher"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 141
                # deployment id pattern - on the format: /parent/child etc.
                "default" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 147
                    # The id of the dispatcher to use for this actor.
                    # If undefined or empty the dispatcher specified in code
                    # (Props.withDispatcher) is used, or default-dispatcher if not
                    # specified at all.
                    "dispatcher" : "",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 155
                    # The id of the mailbox to use for this actor.
                    # If undefined or empty the default mailbox of the configured dispatcher
                    # is used or if there is no mailbox configuration the mailbox specified
                    # in code (Props.withMailbox) is used.
                    # If there is a mailbox defined in the configured dispatcher then that
                    # overrides this setting.
                    "mailbox" : "",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 180
                    # number of children to create in case of a router;
                    # this setting is ignored if routees.paths is given
                    "nr-of-instances" : 1,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 260
                    # Routers with dynamically resizable number of routees based on
                    # performance metrics.
                    # This feature is enabled by including (parts of) this section in
                    # the deployment, cannot be enabled together with default resizer.
                    "optimal-size-exploring-resizer" : {
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 276
                        # Interval between each resize attempt
                        "action-interval" : "5s",
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 289
                        # Probabily of doing an exploration v.s. optmization.
                        "chance-of-exploration" : 0.4,
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 273
                        # probability of doing a ramping down when all routees are busy
                        # during exploration.
                        "chance-of-ramping-down-when-full" : 0.2,
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 280
                        # If the routees have not been fully utilized (i.e. all routees busy)
                        # for such length, the resizer will downsize the pool.
                        "downsize-after-underutilized-for" : "72h",
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 297
                        # When downsizing after a long streak of underutilization, the resizer
                        # will downsize the pool to the highest utiliziation multiplied by a
                        # a downsize rasio. This downsize ratio determines the new pools size
                        # in comparison to the highest utilization.
                        # E.g. if the highest utilization is 10, and the down size ratio
                        # is 0.8, the pool will be downsized to 8
                        "downsize-ratio" : 0.8,
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 262
                        "enabled" : "off",
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 286
                        # Duration exploration, the ratio between the largest step size and
                        # current pool size. E.g. if the current pool size is 50, and the
                        # explore-step-size is 0.1, the maximum pool size change during
                        # exploration will be +- 5
                        "explore-step-size" : 0.1,
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 265
                        # The fewest number of routees the router should ever have.
                        "lower-bound" : 1,
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 301
                        # When optimizing, the resizer only considers the sizes adjacent to the
                        # current size. This number indicates how many adjacent sizes to consider.
                        "optimization-range" : 16,
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 269
                        # The most number of routees the router should ever have.
                        # Must be greater than or equal to lower-bound.
                        "upper-bound" : 10,
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 310
                        # The weight of the latest metric over old metrics when collecting
                        # performance metrics.
                        # E.g. if the last processing speed is 10 millis per message at pool
                        # size 5, and if the new processing speed collected is 6 millis per
                        # message at pool size 5. Given a weight of 0.3, the metrics
                        # representing pool size 5 will be 6 * 0.3 + 10 * 0.7, i.e. 8.8 millis
                        # Obviously, this number should be between 0 and 1.
                        "weight-of-latest-metric" : 0.5
                    },
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 211
                    # Routers with dynamically resizable number of routees; this feature is
                    # enabled by including (parts of) this section in the deployment
                    "resizer" : {
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 249
                        # Fraction of routees to be removed when the resizer reaches the
                        # backoffThreshold.
                        # For example, 0.1 would decrease 10% (rounded up), i.e. if current
                        # capacity is 9 it will request an decrease of 1 routee.
                        "backoff-rate" : 0.1,
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 243
                        # Minimum fraction of busy routees before backing off.
                        # For example, if this is 0.3, then we'll remove some routees only when
                        # less than 30% of routees are busy, i.e. if current capacity is 10 and
                        # 3 are busy then the capacity is unchanged, but if 2 or less are busy
                        # the capacity is decreased.
                        # Use 0.0 or negative to avoid removal of routees.
                        "backoff-threshold" : 0.3,
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 213
                        "enabled" : "off",
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 216
                        # The fewest number of routees the router should ever have.
                        "lower-bound" : 1,
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 253
                        # Number of messages between resize operation.
                        # Use 1 to resize before each message.
                        "messages-per-resize" : 10,
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 230
                        # Threshold used to evaluate if a routee is considered to be busy
                        # (under pressure). Implementation depends on this value (default is 1).
                        # 0:   number of routees currently processing a message.
                        # 1:   number of routees currently processing a message has
                        #      some messages in mailbox.
                        # > 1: number of routees with at least the configured pressure-threshold
                        #      messages in their mailbox. Note that estimating mailbox size of
                        #      default UnboundedMailbox is O(N) operation.
                        "pressure-threshold" : 1,
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 235
                        # Percentage to increase capacity whenever all routees are busy.
                        # For example, 0.2 would increase 20% (rounded up), i.e. if current
                        # capacity is 6 it will request an increase of 2 more routees.
                        "rampup-rate" : 0.2,
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 220
                        # The most number of routees the router should ever have.
                        # Must be greater than or equal to lower-bound.
                        "upper-bound" : 10
                    },
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 193
                    "routees" : {
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 197
                        # Alternatively to giving nr-of-instances you can specify the full
                        # paths of those actors which should be routed to. This setting takes
                        # precedence over nr-of-instances
                        "paths" : []
                    },
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 176
                    # routing (load-balance) scheme to use
                    # - available: "from-code", "round-robin", "random", "smallest-mailbox",
                    #              "scatter-gather", "broadcast"
                    # - or:        Fully qualified class name of the router class.
                    #              The class must extend akka.routing.CustomRouterConfig and
                    #              have a public constructor with com.typesafe.config.Config
                    #              and optional akka.actor.DynamicAccess parameter.
                    # - default is "from-code";
                    # Whether or not an actor is transformed to a Router is decided in code
                    # only (Props.withRouter). The type of router can be overridden in the
                    # configuration; specifying "from-code" means that the values specified
                    # in the code shall be used.
                    # In case of routing, the actors to be routed to can be specified
                    # in several ways:
                    # - nr-of-instances: will create that many children
                    # - routees.paths: will route messages to these paths using ActorSelection,
                    #   i.e. will not create children
                    # - resizer: dynamically resizable number of routees as specified in
                    #   resizer below
                    "router" : "from-code",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 188
                    "tail-chopping-router" : {
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 190
                        # interval is duration between sending message to next routee
                        "interval" : "10 milliseconds"
                    },
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 186
                    # number of virtual nodes per node for consistent-hashing router
                    "virtual-nodes-factor" : 10,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 183
                    # within is the timeout used for routers containing future calls
                    "within" : "5 seconds"
                }
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 725
            # Configuration items which are used by the akka.actor.ActorDSL._ methods
            "dsl" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 741
                # Default timeout to assume for operations like Inbox.receive et al
                "default-timeout" : "5s",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 738
                # Maximum queue size of the actor created by newInbox(); this protects
                # against faulty programs which use select() and consistently miss messages
                "inbox-size" : 1000
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 702
            # Additional serialization-bindings that are replacing Java serialization are
            # defined in this section for backwards compatibility reasons. They are included 
            # by default but can be excluded for backwards compatibility with Akka 2.4.x.
            # They can be disabled with enable-additional-serialization-bindings=off.
            # 
            # This should only be needed for backwards compatibility reasons.
            "enable-additional-serialization-bindings" : "on",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 95
            # The guardian "/user" will use this class to obtain its supervisorStrategy.
            # It needs to be a subclass of akka.actor.SupervisorStrategyConfigurator.
            # In addition to the default there is akka.actor.StoppingSupervisorStrategy.
            "guardian-supervisor-strategy" : "akka.actor.DefaultSupervisorStrategy",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 552
            "mailbox" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 607
                "bounded-control-aware-queue-based" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 621
                    # FQCN of the MailboxType, The Class of the FQCN must have a public
                    # constructor with (akka.actor.ActorSystem.Settings,
                    # com.typesafe.config.Config) parameters.
                    "mailbox-type" : "akka.dispatch.BoundedControlAwareMailbox"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 593
                "bounded-deque-based" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 607
                    # FQCN of the MailboxType, The Class of the FQCN must have a public
                    # constructor with (akka.actor.ActorSystem.Settings,
                    # com.typesafe.config.Config) parameters.
                    "mailbox-type" : "akka.dispatch.BoundedDequeBasedMailbox"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 579
                "bounded-queue-based" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 593
                    # FQCN of the MailboxType, The Class of the FQCN must have a public
                    # constructor with (akka.actor.ActorSystem.Settings,
                    # com.typesafe.config.Config) parameters.
                    "mailbox-type" : "akka.dispatch.BoundedMailbox"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 617
                # The LoggerMailbox will drain all messages in the mailbox
                # when the system is shutdown and deliver them to the StandardOutLogger.
                # Do not change this unless you know what you are doing.
                "logger-queue" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 628
                    "mailbox-type" : "akka.event.LoggerMailboxType"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 559
                # Mapping between message queue semantics and mailbox configurations.
                # Used by akka.dispatch.RequiresMessageQueue[T] to enforce different
                # mailbox types on actors.
                # If your Actor implements RequiresMessageQueue[T], then when you create
                # an instance of that actor its mailbox type will be decided by looking
                # up a mailbox configuration via T in this mapping
                "requirements" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 577
                    "akka.dispatch.BoundedControlAwareMessageQueueSemantics" : "akka.actor.mailbox.bounded-control-aware-queue-based",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 569
                    "akka.dispatch.BoundedDequeBasedMessageQueueSemantics" : "akka.actor.mailbox.bounded-deque-based",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 563
                    "akka.dispatch.BoundedMessageQueueSemantics" : "akka.actor.mailbox.bounded-queue-based",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 573
                    "akka.dispatch.ControlAwareMessageQueueSemantics" : "akka.actor.mailbox.unbounded-control-aware-queue-based",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 565
                    "akka.dispatch.DequeBasedMessageQueueSemantics" : "akka.actor.mailbox.unbounded-deque-based",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 571
                    "akka.dispatch.MultipleConsumerSemantics" : "akka.actor.mailbox.unbounded-queue-based",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 575
                    "akka.dispatch.UnboundedControlAwareMessageQueueSemantics" : "akka.actor.mailbox.unbounded-control-aware-queue-based",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 567
                    "akka.dispatch.UnboundedDequeBasedMessageQueueSemantics" : "akka.actor.mailbox.unbounded-deque-based",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 561
                    "akka.dispatch.UnboundedMessageQueueSemantics" : "akka.actor.mailbox.unbounded-queue-based",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 579
                    "akka.event.LoggerMessageQueueSemantics" : "akka.actor.mailbox.logger-queue"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 600
                "unbounded-control-aware-queue-based" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 614
                    # FQCN of the MailboxType, The Class of the FQCN must have a public
                    # constructor with (akka.actor.ActorSystem.Settings,
                    # com.typesafe.config.Config) parameters.
                    "mailbox-type" : "akka.dispatch.UnboundedControlAwareMailbox"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 586
                "unbounded-deque-based" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 600
                    # FQCN of the MailboxType, The Class of the FQCN must have a public
                    # constructor with (akka.actor.ActorSystem.Settings,
                    # com.typesafe.config.Config) parameters.
                    "mailbox-type" : "akka.dispatch.UnboundedDequeBasedMailbox"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 572
                "unbounded-queue-based" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 586
                    # FQCN of the MailboxType, The Class of the FQCN must have a public
                    # constructor with (akka.actor.ActorSystem.Settings,
                    # com.typesafe.config.Config) parameters.
                    "mailbox-type" : "akka.dispatch.UnboundedMailbox"
                }
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 90
            # Either one of "local", "remote" or "cluster" or the
            # FQCN of the ActorRefProvider to be used; the below is the built-in default,
            # note that "remote" and "cluster" requires the akka-remote and akka-cluster
            # artifacts to be on the classpath.
            "provider" : "local",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 120
            "router" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 120
                # Mapping between ´deployment.router' short names to fully qualified class names
                "type-mapping" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 126
                    "balancing-pool" : "akka.routing.BalancingPool",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 129
                    "broadcast-group" : "akka.routing.BroadcastGroup",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 128
                    "broadcast-pool" : "akka.routing.BroadcastPool",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 135
                    "consistent-hashing-group" : "akka.routing.ConsistentHashingGroup",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 134
                    "consistent-hashing-pool" : "akka.routing.ConsistentHashingPool",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 121
                    "from-code" : "akka.routing.NoRouter",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 125
                    "random-group" : "akka.routing.RandomGroup",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 124
                    "random-pool" : "akka.routing.RandomPool",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 123
                    "round-robin-group" : "akka.routing.RoundRobinGroup",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 122
                    "round-robin-pool" : "akka.routing.RoundRobinPool",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 131
                    "scatter-gather-group" : "akka.routing.ScatterGatherFirstCompletedGroup",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 130
                    "scatter-gather-pool" : "akka.routing.ScatterGatherFirstCompletedPool",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 127
                    "smallest-mailbox-pool" : "akka.routing.SmallestMailboxPool",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 133
                    "tail-chopping-group" : "akka.routing.TailChoppingGroup",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 132
                    "tail-chopping-pool" : "akka.routing.TailChoppingPool"
                }
            },
            # merge of reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 39,reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 681
            # Class to Serializer binding. You only need to specify the name of an
            # interface or abstract base class of the messages. In case of ambiguity it
            # is using the most specific configured class, or giving a warning and
            # choosing the “first” one.
            # 
            # To disable one of the default serializers, assign its class to "none", like
            # "java.io.Serializable" = none
            "serialization-bindings" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 692
                "[B" : "bytes",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 40
                "akka.testkit.JavaSerializable" : "java",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 693
                "java.io.Serializable" : "java"
            },
            # merge of reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 35,reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 719
            # Configuration namespace of serialization identifiers.
            # Each serializer implementation must have an entry in the following format:
            # `akka.actor.serialization-identifiers."FQCN" = ID`
            # where `FQCN` is fully qualified class name of the serializer implementation
            # and `ID` is globally unique serializer identifier number.
            # Identifier values from 0 to 40 are reserved for Akka internal usage.
            "serialization-identifiers" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 731
                "akka.serialization.ByteArraySerializer" : 4,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 730
                "akka.serialization.JavaSerializer" : 1,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 36
                "akka.testkit.TestMessageSerializer" : 23
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 107
            # Serializes and deserializes creators (in Props) to ensure that they can be
            # sent over the network, this is only intended for testing. Purely local deployments
            # as marked with deploy.scope == LocalScope are exempt from verification.
            "serialize-creators" : "off",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 102
            # Serializes and deserializes (non-primitive) messages to ensure immutability,
            # this is only intended for testing.
            "serialize-messages" : "off",
            # merge of reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 31,reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 669
            # Entries for pluggable serializers and their bindings.
            "serializers" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 681
                "bytes" : "akka.serialization.ByteArraySerializer",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 680
                "java" : "akka.serialization.JavaSerializer",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 32
                "test-message-serializer" : "akka.testkit.TestMessageSerializer"
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 114
            "typed" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 116
                # Default timeout for typed actor methods with non-void return type
                "timeout" : "5s"
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 112
            # Timeout for send operations to top-level actors which are in the process
            # of being started. This is only relevant if using a bounded mailbox or the
            # CallingThreadDispatcher for a top-level actor.
            "unstarted-push-timeout" : "10s",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 715
            # Log warnings when the default Java serialization is used to serialize messages.
            # The default serializer uses Java serialization which is not very performant and should not
            # be used in production environments unless you don't care about performance. In that case
            # you can turn this off.
            "warn-about-java-serializer-usage" : "on",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 721
            # To be used with the above warn-about-java-serializer-usage
            # When warn-about-java-serializer-usage = on, and this warn-on-no-serialization-verification = off,
            # warnings are suppressed for classes extending NoSerializationVerificationNeeded
            # to reduce noize.
            "warn-on-no-serialization-verification" : "on"
        },
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1023
        # CoordinatedShutdown is an extension that will perform registered
        # tasks in the order that is defined by the phases. It is started
        # by calling CoordinatedShutdown(system).run(). This can be triggered
        # by different things, for example:
        # - JVM shutdown hook will by default run CoordinatedShutdown
        # - Cluster node will automatically run CoordinatedShutdown when it
        #   sees itself as Exiting
        # - A management console or other application specific command can 
        #   run CoordinatedShutdown
        "coordinated-shutdown" : {
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1036
            # The timeout that will be used for a phase if not specified with 
            # 'timeout' in the phase
            "default-phase-timeout" : "5 s",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1045
            # Exit the JVM (System.exit(0)) in the last phase actor-system-terminate
            # if this is set to 'on'. It is done after termination of the 
            # ActorSystem if terminate-actor-system=on, otherwise it is done 
            # immediately when the last phase is reached.  
            "exit-jvm" : "off",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1051
            # //#coordinated-shutdown-phases
            # CoordinatedShutdown will run the tasks that are added to these
            # phases. The phases can be ordered as a DAG by defining the 
            # dependencies between the phases.  
            # Each phase is defined as a named config section with the
            # following optional properties:
            # - timeout=15s: Override the default-phase-timeout for this phase.
            # - recover=off: If the phase fails the shutdown is aborted
            #                and depending phases will not be executed.
            # depends-on=[]: Run the phase after the given phases
            "phases" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1117
                # Last phase. See terminate-actor-system and exit-jvm above.
                # Don't add phases that depends on this phase because the 
                # dispatcher and scheduler of the ActorSystem have been shutdown. 
                "actor-system-terminate" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1119
                    "depends-on" : [
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1129
                        "before-actor-system-terminate"
                    ],
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1128
                    "timeout" : "10 s"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1110
                # Phase for custom application tasks that are to be run
                # after cluster shutdown and before ActorSystem termination.
                "before-actor-system-terminate" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1111
                    "depends-on" : [
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1121
                        "cluster-shutdown"
                    ]
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1077
                # Phase for custom application tasks that are to be run
                # after service shutdown and before cluster shutdown.
                "before-cluster-shutdown" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1078
                    "depends-on" : [
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1088
                        "service-stop"
                    ]
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1057
                # The first pre-defined phase that applications can add tasks to.
                # Note that more phases can be be added in the application's
                # configuration by overriding this phase with an additional 
                # depends-on.
                "before-service-unbind" : {},
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1093
                # Shutdown cluster singletons
                "cluster-exiting" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1095
                    "depends-on" : [
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1105
                        "cluster-leave"
                    ],
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1104
                    "timeout" : "10 s"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1099
                # Wait until exiting has been completed
                "cluster-exiting-done" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1100
                    "depends-on" : [
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1110
                        "cluster-exiting"
                    ]
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1088
                # Emit the leave command for the node that is shutting down.
                "cluster-leave" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1089
                    "depends-on" : [
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1099
                        "cluster-sharding-shutdown-region"
                    ]
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1082
                # Graceful shutdown of the Cluster Sharding regions.
                "cluster-sharding-shutdown-region" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1084
                    "depends-on" : [
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1094
                        "before-cluster-shutdown"
                    ],
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1093
                    "timeout" : "10 s"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1104
                # Shutdown the cluster extension
                "cluster-shutdown" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1105
                    "depends-on" : [
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1115
                        "cluster-exiting-done"
                    ]
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1066
                # Wait for requests that are in progress to be completed.
                "service-requests-done" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1067
                    "depends-on" : [
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1077
                        "service-unbind"
                    ]
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1071
                # Final shutdown of service endpoints.
                "service-stop" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1072
                    "depends-on" : [
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1082
                        "service-requests-done"
                    ]
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1061
                # Stop accepting new incoming requests in for example HTTP.
                "service-unbind" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1062
                    "depends-on" : [
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1072
                        "before-service-unbind"
                    ]
                }
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1049
            # Run the coordinated shutdown when the JVM process exits, e.g.
            # via kill SIGTERM signal (SIGINT ctrl-c doesn't work).
            "run-by-jvm-shutdown-hook" : "on",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1039
            # Terminate the ActorSystem in the last phase actor-system-terminate.
            "terminate-actor-system" : "on"
        },
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 78
        # Toggles whether threads created by this ActorSystem should be daemons or not
        "daemonic" : "off",
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 75
        # List FQCN of extensions which shall be loaded at actor system startup.
        # Should be on the format: 'extensions = ["foo", "bar"]' etc.
        # See the Akka Documentation for more info about Extensions
        "extensions" : [],
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 13
        # Home directory of Akka, modules in the deploy directory will be loaded
        "home" : "",
        # merge of reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 12,akka-http-version.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/akka-http-version.conf: 1,reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http_2.12/jars/akka-http_2.12-10.0.10.jar!/reference.conf: 8
        "http" : {
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 205
            "client" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 213
                # The time period within which the TCP connecting process must be completed.
                "connecting-timeout" : "10s",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 217
                # The time after which an idle connection will be automatically closed.
                # Set to `infinite` to completely disable idle timeouts.
                "idle-timeout" : "60 s",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 255
                # Enables/disables the logging of unencrypted HTTP traffic to and from the HTTP
                # client for debugging reasons.
                # 
                # Note: Use with care. Logging of unencrypted data traffic may expose secret data.
                # 
                # Incoming and outgoing traffic will be logged in hexdump format. To enable logging,
                # specify the number of bytes to log per chunk of data (the actual chunking depends
                # on implementation details and networking conditions and should be treated as
                # arbitrary).
                # 
                # For logging on the server side, see akka.http.server.log-unencrypted-network-bytes.
                # 
                # `off` : no log messages are produced
                # Int   : determines how many bytes should be logged per data chunk
                "log-unencrypted-network-bytes" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 237
                # Modify to tweak parsing settings on the client-side only.
                "parsing" : {},
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 222
                # The initial size of the buffer to render the request headers in.
                # Can be used for fine-tuning request rendering performance but probably
                # doesn't have to be fiddled with in most applications.
                "request-header-size-hint" : 512,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 226
                # Socket options to set for the listening socket. If a setting is left
                # undefined, it will use whatever the default on the system is.
                "socket-options" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 227
                    "so-receive-buffer-size" : "undefined",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 229
                    "so-reuse-address" : "undefined",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 228
                    "so-send-buffer-size" : "undefined",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 230
                    "so-traffic-class" : "undefined",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 231
                    "tcp-keep-alive" : "undefined",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 233
                    "tcp-no-delay" : "undefined",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 232
                    "tcp-oob-inline" : "undefined"
                },
                # merge of reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 210,akka-http-version.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/akka-http-version.conf: 1
                "user-agent-header" : "akka-http/10.0.10"
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 258
            "host-connection-pool" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 310
                # Modify to tweak client settings for host connection pools only.
                # 
                # IMPORTANT:
                # Please note that this section mirrors `akka.http.client` however is used only for pool-based APIs,
                # such as `Http().superPool` or `Http().singleRequest`.
                "client" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 318
                    # The time period within which the TCP connecting process must be completed.
                    "connecting-timeout" : "10s",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 322
                    # The time after which an idle connection will be automatically closed.
                    # Set to `infinite` to completely disable idle timeouts.
                    "idle-timeout" : "60 s",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 342
                    # IMPORTANT: Please note that this section is replicated in `client` and `server`.
                    "parsing" : {},
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 327
                    # The initial size of the buffer to render the request headers in.
                    # Can be used for fine-tuning request rendering performance but probably
                    # doesn't have to be fiddled with in most applications.
                    "request-header-size-hint" : 512,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 331
                    # Socket options to set for the listening socket. If a setting is left
                    # undefined, it will use whatever the default on the system is.
                    "socket-options" : {
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 332
                        "so-receive-buffer-size" : "undefined",
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 334
                        "so-reuse-address" : "undefined",
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 333
                        "so-send-buffer-size" : "undefined",
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 335
                        "so-traffic-class" : "undefined",
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 336
                        "tcp-keep-alive" : "undefined",
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 338
                        "tcp-no-delay" : "undefined",
                        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 337
                        "tcp-oob-inline" : "undefined"
                    },
                    # merge of reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 315,akka-http-version.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/akka-http-version.conf: 1
                    "user-agent-header" : "akka-http/10.0.10"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 303
                # The time after which an idle connection pool (without pending requests)
                # will automatically terminate itself. Set to `infinite` to completely disable idle timeouts.
                "idle-timeout" : "30 s",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 261
                # The maximum number of parallel connections that a connection pool to a
                # single host endpoint is allowed to establish. Must be greater than zero.
                "max-connections" : 4,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 281
                # The maximum number of open requests accepted into the pool across all
                # materializations of any of its client flows.
                # Protects against (accidentally) overloading a single pool with too many client flow materializations.
                # Note that with N concurrent materializations the max number of open request in the pool
                # will never exceed N * max-connections * pipelining-limit.
                # Must be a power of 2 and > 0!
                "max-open-requests" : 32,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 273
                # The maximum number of times failed requests are attempted again,
                # (if the request can be safely retried) before giving up and returning an error.
                # Set to zero to completely disable request retries.
                "max-retries" : 5,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 268
                # The minimum number of parallel connections that a pool should keep alive ("hot").
                # If the number of connections is falling below the given threshold, new ones are being spawned.
                # You can use this setting to build a hot pool of "always on" connections.
                # Default is 0, meaning there might be no active connection at given moment.
                # Keep in mind that `min-connections` should be smaller than `max-connections` or equal
                "min-connections" : 0,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 299
                # The maximum number of requests that are dispatched to the target host in
                # batch-mode across a single connection (HTTP pipelining).
                # A setting of 1 disables HTTP pipelining, since only one request per
                # connection can be "in flight" at any time.
                # Set to higher values to enable HTTP pipelining.
                # This value must be > 0.
                # (Note that, independently of this setting, pipelining will never be done
                # on a connection that still has a non-idempotent request in flight.
                # 
                # Before increasing this value, make sure you understand the effects of head-of-line blocking.
                # Using a connection pool, a request may be issued on a connection where a previous
                # long-running request hasn't finished yet. The response to the pipelined requests may then be stuck
                # behind the response of the long-running previous requests on the server. This may introduce an
                # unwanted "coupling" of run time between otherwise unrelated requests.
                # 
                # See http://tools.ietf.org/html/rfc7230#section-6.3.2 for more info.)
                "pipelining-limit" : 1
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 353
            # Modify to tweak default parsing settings.
            # 
            # IMPORTANT:
            # Please note that this sections settings can be overriden by the corresponding settings in:
            # `akka.http.server.parsing`, `akka.http.client.parsing` or `akka.http.host-connection-pool.client.parsing`.
            "parsing" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 395
                # Sets the parsing mode for parsing cookies.
                # The following value are defined:
                # 
                # `rfc6265`: Only RFC6265-compliant cookies are parsed. Surrounding double-quotes are accepted and
                #   automatically removed. Non-compliant cookies are silently discarded.
                # `raw`: Raw parsing allows any non-control character but ';' to appear in a cookie value. There's no further
                #   post-processing applied, so that the resulting value string may contain any number of whitespace, unicode,
                #   double quotes, or '=' characters at any position.
                #   The rules for parsing the cookie name are the same ones from RFC 6265.
                # 
                "cookie-parsing-mode" : "rfc6265",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 416
                # Configures the verbosity with which message (request or response) parsing
                # errors are written to the application log.
                # 
                # Supported settings:
                # `off`   : no log messages are produced
                # `simple`: a condensed single-line message is logged
                # `full`  : the full error details (potentially spanning several lines) are logged
                "error-logging-verbosity" : "full",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 429
                # limits for the number of different values per header type that the
                # header cache will hold
                "header-cache" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 431
                    "Content-MD5" : 0,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 432
                    "Date" : 0,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 433
                    "If-Match" : 0,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 434
                    "If-Modified-Since" : 0,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 435
                    "If-None-Match" : 0,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 436
                    "If-Range" : 0,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 437
                    "If-Unmodified-Since" : 0,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 438
                    "User-Agent" : 32,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 430
                    "default" : 12
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 407
                # Enables/disables the logging of warning messages in case an incoming
                # message (request or response) contains an HTTP header which cannot be
                # parsed into its high-level model class due to incompatible syntax.
                # Note that, independently of this settings, akka-http will accept messages
                # with such headers as long as the message as a whole would still be legal
                # under the HTTP specification even without this header.
                # If a header cannot be parsed into a high-level model instance it will be
                # provided as a `RawHeader`.
                # If logging is enabled it is performed with the configured
                # `error-logging-verbosity`.
                "illegal-header-warnings" : "on",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 425
                # Configures the processing mode when encountering illegal characters in
                # header value of response.
                # 
                # Supported mode:
                # `error`  : default mode, throw an ParsingException and terminate the processing
                # `warn`   : ignore the illegal characters in response header value and log a warning message
                # `ignore` : just ignore the illegal characters in response header value
                "illegal-response-header-value-processing-mode" : "error",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 361
                "max-chunk-ext-length" : 256,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 362
                "max-chunk-size" : "1m",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 373
                # Default maximum content length which should not be exceeded by incoming request entities.
                # Can be changed at runtime (to a higher or lower value) via the `HttpEntity::withSizeLimit` method.
                # Note that it is not necessarily a problem to set this to a high value as all stream operations
                # are always properly backpressured.
                # Nevertheless you might want to apply some limit in order to prevent a single client from consuming
                # an excessive amount of server resources.
                # 
                # Set to `infinite` to completely disable entity length checks. (Even then you can still apply one
                # programmatically via `withSizeLimit`.)
                "max-content-length" : "8m",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 360
                "max-header-count" : 64,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 358
                "max-header-name-length" : 64,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 359
                "max-header-value-length" : "8k",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 356
                "max-method-length" : 16,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 357
                "max-response-reason-length" : 64,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 355
                # The limits for the various parts of the HTTP message parser.
                "max-uri-length" : "2k",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 444
                # Enables/disables inclusion of an Tls-Session-Info header in parsed
                # messages over Tls transports (i.e., HttpRequest on server side and
                # HttpResponse on client side).
                "tls-session-info-header" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 383
                # Sets the strictness mode for parsing request target URIs.
                # The following values are defined:
                # 
                # `strict`: RFC3986-compliant URIs are required,
                #     a 400 response is triggered on violations
                # 
                # `relaxed`: all visible 7-Bit ASCII chars are allowed
                # 
                "uri-parsing-mode" : "strict"
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http_2.12/jars/akka-http_2.12-10.0.10.jar!/reference.conf: 8
            "routing" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http_2.12/jars/akka-http_2.12-10.0.10.jar!/reference.conf: 38
                # The maximum number of bytes per ByteString a decoding directive will produce
                # for an entity data stream.
                "decode-max-bytes-per-chunk" : "1m",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http_2.12/jars/akka-http_2.12-10.0.10.jar!/reference.conf: 17
                # Enables/disables ETag and `If-Modified-Since` support for FileAndResourceDirectives
                "file-get-conditional" : "on",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 80
                # Fully qualified config path which holds the dispatcher configuration
                # to be used by ActorMaterializer when creating Actors for IO operations,
                # such as FileSource, FileSink and others.
                "file-io-dispatcher" : "akka.stream.default-blocking-io-dispatcher",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http_2.12/jars/akka-http_2.12-10.0.10.jar!/reference.conf: 30
                # The maximum size between two requested ranges. Ranges with less space in between will be coalesced.
                # 
                # When multiple ranges are requested, a server may coalesce any of the ranges that overlap or that are separated
                # by a gap that is smaller than the overhead of sending multiple parts, regardless of the order in which the
                # corresponding byte-range-spec appeared in the received Range header field. Since the typical overhead between
                # parts of a multipart/byteranges payload is around 80 bytes, depending on the selected representation's
                # media type and the chosen boundary parameter length, it can be less efficient to transfer many small
                # disjoint parts than it is to transfer the entire selected representation.
                "range-coalescing-threshold" : 80,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http_2.12/jars/akka-http_2.12-10.0.10.jar!/reference.conf: 34
                # The maximum number of allowed ranges per request.
                # Requests with more ranges will be rejected due to DOS suspicion.
                "range-count-limit" : 16,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http_2.12/jars/akka-http_2.12-10.0.10.jar!/reference.conf: 20
                # Enables/disables the rendering of the "rendered by" footer in directory listings
                "render-vanity-footer" : "yes",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http_2.12/jars/akka-http_2.12-10.0.10.jar!/reference.conf: 14
                # Enables/disables the returning of more detailed error messages to the
                # client in the error response
                # Should be disabled for browser-facing APIs due to the risk of XSS attacks
                # and (probably) enabled for internal or non-browser APIs
                # (Note that akka-http will always produce log messages containing the full error details)
                "verbose-error-messages" : "off"
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 14
            "server" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 128
                # The requested maximum length of the queue of incoming connections.
                # If the server is busy and the backlog is full the OS will start dropping
                # SYN-packets and connection attempts may fail. Note, that the backlog
                # size is usually only a maximum size hint for the OS and the OS can
                # restrict the number further based on global limits.
                "backlog" : 100,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 53
                # The time period within which the TCP binding process must be completed.
                "bind-timeout" : "1s",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 138
                # If this setting is empty the server only accepts requests that carry a
                # non-empty `Host` header. Otherwise it responds with `400 Bad Request`.
                # Set to a non-empty value to be used in lieu of a missing or empty `Host`
                # header to make the server accept such requests.
                # Note that the server will never accept HTTP/1.1 request without a `Host`
                # header, i.e. this setting only affects HTTP/1.1 requests with an empty
                # `Host` header as well as HTTP/1.0 requests.
                # Examples: `www.spray.io` or `example.com:8080`
                "default-host-header" : "",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 173
                "http2" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 193
                    # The number of request data bytes the HTTP/2 implementation is allowed to buffer internally per connection. Free
                    # space in this buffer is communicated to the peer using HTTP/2 flow-control messages to backpressure data if it
                    # isn't read fast enough.
                    # 
                    # When there is no backpressure, this amount will limit the amount of in-flight data. It might need to be increased
                    # for high bandwidth-delay-product connections.
                    # 
                    # There is a relation between the `incoming-connection-level-buffer-size` and the `incoming-stream-level-buffer-size`:
                    # If incoming-connection-level-buffer-size < incoming-stream-level-buffer-size * number_of_streams, then
                    # head-of-line blocking is possible between different streams on the same connection.
                    "incoming-connection-level-buffer-size" : "10 MB",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 201
                    # The number of request data bytes the HTTP/2 implementation is allowed to buffer internally per stream. Free space
                    # in this buffer is communicated to the peer using HTTP/2 flow-control messages to backpressure data if it isn't
                    # read fast enough.
                    # 
                    # When there is no backpressure, this amount will limit the amount of in-flight data per stream. It might need to
                    # be increased for high bandwidth-delay-product connections.
                    "incoming-stream-level-buffer-size" : "512kB",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 181
                    # The maximum number of bytes to receive from a request entity in a single chunk.
                    # 
                    # The reasoning to limit that amount (instead of delivering all buffered data for a stream) is that
                    # the amount of data in the internal buffers will drive backpressure and flow control on the HTTP/2 level. Bigger
                    # chunks would mean that the user-level entity reader will have to buffer all that data if it cannot read it in one
                    # go. The implementation would not be able to backpressure further data in that case because it does not know about
                    # this user-level buffer.
                    "request-entity-chunk-size" : "65536 b"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 34
                # The time after which an idle connection will be automatically closed.
                # Set to `infinite` to completely disable idle connection timeouts.
                "idle-timeout" : "60 s",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 66
                # The time period the HTTP server implementation will keep a connection open after
                # all data has been delivered to the network layer. This setting is similar to the SO_LINGER socket option
                # but does not only include the OS-level socket but also covers the Akka IO / Akka Streams network stack.
                # The setting is an extra precaution that prevents clients from keeping open a connection that is
                # already considered completed from the server side.
                # 
                # If the network level buffers (including the Akka Stream / Akka IO networking stack buffers)
                # contains more data than can be transferred to the client in the given time when the server-side considers
                # to be finished with this connection, the client may encounter a connection reset.
                # 
                # Set to 'infinite' to disable automatic connection closure (which will risk to leak connections).
                "linger-timeout" : "1 min",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 171
                # Enables/disables the logging of unencrypted HTTP traffic to and from the HTTP
                # server for debugging reasons.
                # 
                # Note: Use with care. Logging of unencrypted data traffic may expose secret data.
                # 
                # Incoming and outgoing traffic will be logged in hexdump format. To enable logging,
                # specify the number of bytes to log per chunk of data (the actual chunking depends
                # on implementation details and networking conditions and should be treated as
                # arbitrary).
                # 
                # For logging on the client side, see akka.http.client.log-unencrypted-network-bytes.
                # 
                # `off` : no log messages are produced
                # Int   : determines how many bytes should be logged per data chunk
                "log-unencrypted-network-bytes" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 80
                # The maximum number of concurrently accepted connections when using the
                # `Http().bindAndHandle` methods.
                # 
                # This setting doesn't apply to the `Http().bind` method which will still
                # deliver an unlimited backpressured stream of incoming connections.
                # 
                # Note, that this setting limits the number of the connections on a best-effort basis.
                # It does *not* strictly guarantee that the number of established TCP connections will never
                # exceed the limit (but it will be approximately correct) because connection termination happens
                # asynchronously. It also does *not* guarantee that the number of concurrently active handler
                # flow materializations will never exceed the limit for the reason that it is impossible to reliably
                # detect when a materialization has ended.
                "max-connections" : 1024,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 153
                # Modify to tweak parsing settings on the server-side only.
                "parsing" : {},
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 92
                # The maximum number of requests that are accepted (and dispatched to
                # the application) on one single connection before the first request
                # has to be completed.
                # Incoming requests that would cause the pipelining limit to be exceeded
                # are not read from the connections socket so as to build up "back-pressure"
                # to the client via TCP flow control.
                # A setting of 1 disables HTTP pipelining, since only one request per
                # connection can be "open" (i.e. being processed by the application) at any
                # time. Set to higher values to enable HTTP pipelining.
                # This value must be > 0 and <= 1024.
                "pipelining-limit" : 16,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 23
                # "PREVIEW" features that are not yet fully production ready.
                # These flags can can change or be removed between patch releases.
                "preview" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 29
                    # ONLY WORKS WITH `bindAndHandleAsync` (currently)
                    # 
                    # If this setting is enabled AND the akka-http2-support is found 
                    # on the classpath the usual Http().bind... method calls will bind 
                    # using HTTP/2. Please note that you must configure HTTPS while doing so.
                    "enable-http2" : "off"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 100
                # Enables/disables the addition of a `Raw-Request-URI` header holding the
                # original raw request URI as the client has sent it.
                "raw-request-uri-header" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 96
                # Enables/disables the addition of a `Remote-Address` header
                # holding the clients (remote) IP address.
                "remote-address-header" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 50
                # Defines the default time period within which the application has to
                # produce an HttpResponse for any given HttpRequest it received.
                # The timeout begins to run when the *end* of the request has been
                # received, so even potentially long uploads can have a short timeout.
                # Set to `infinite` to completely disable request timeout checking.
                # 
                # Make sure this timeout is smaller than the idle-timeout, otherwise,
                # the idle-timeout will kick in first and reset the TCP connection
                # without a response.
                # 
                # If this setting is not `infinite` the HTTP server layer attaches a
                # `Timeout-Access` header to the request, which enables programmatic
                # customization of the timeout period and timeout response for each
                # request individually.
                "request-timeout" : "20 s",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 121
                # The initial size of the buffer to render the response headers in.
                # Can be used for fine-tuning response rendering performance but probably
                # doesn't have to be fiddled with in most applications.
                "response-header-size-hint" : 512,
                # merge of reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 19,akka-http-version.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/akka-http-version.conf: 1
                "server-header" : "akka-http/10.0.10",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 142
                # Socket options to set for the listening socket. If a setting is left
                # undefined, it will use whatever the default on the system is.
                "socket-options" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 143
                    "so-receive-buffer-size" : "undefined",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 145
                    "so-reuse-address" : "undefined",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 144
                    "so-send-buffer-size" : "undefined",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 146
                    "so-traffic-class" : "undefined",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 147
                    "tcp-keep-alive" : "undefined",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 149
                    "tcp-no-delay" : "undefined",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 148
                    "tcp-oob-inline" : "undefined"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 108
                # Enables/disables automatic handling of HEAD requests.
                # If this setting is enabled the server dispatches HEAD requests as GET
                # requests to the application and automatically strips off all message
                # bodies from outgoing responses.
                # Note that, even when this setting is off the server will never send
                # out message bodies on responses to HEAD requests.
                "transparent-head-requests" : "on",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/reference.conf: 116
                # Enables/disables the returning of more detailed error messages to
                # the client in the error response.
                # Should be disabled for browser-facing APIs due to the risk of XSS attacks
                # and (probably) enabled for internal or non-browser APIs.
                # Note that akka-http will always produce log messages containing the full
                # error details.
                "verbose-error-messages" : "off"
            },
            # akka-http-version.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar!/akka-http-version.conf: 1
            "version" : "10.0.10"
        },
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 774
        "io" : {
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 984
            "dns" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 998
                # Fully qualified config path which holds the dispatcher configuration
                # for the manager and resolver router actors.
                # For actual router configuration see akka.actor.deployment./IO-DNS/*
                "dispatcher" : "akka.actor.default-dispatcher",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 993
                "inet-address" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1018
                    # How often to sweep out expired cache entries.
                    # Note that this interval has nothing to do with TTLs
                    "cache-cleanup-interval" : "120s",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1014
                    "negative-ttl" : "default",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1013
                    # To set the time to cache name resolutions
                    # Possible values:
                    # default: sun.net.InetAddressCachePolicy.get() and getNegative()
                    # forever: cache forever
                    # never: no caching
                    # n [time unit]: positive timeout with unit, for example "30 s"
                    "positive-ttl" : "default",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1005
                    # Must implement akka.io.DnsProvider
                    "provider-object" : "akka.io.InetAddressDnsProvider"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 1001
                # Name of the subconfig at path akka.io.dns, see inet-address below
                "resolver" : "inet-address"
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 778
            # By default the select loops run on dedicated threads, hence using a
            # PinnedDispatcher
            "pinned-dispatcher" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 790
                "executor" : "thread-pool-executor",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 791
                "thread-pool-executor" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 791
                    "allow-core-timeout" : "off"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 789
                "type" : "PinnedDispatcher"
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 784
            "tcp" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 816
                # The maximum number of connection that are accepted in one go,
                # higher numbers decrease latency, lower numbers increase fairness on
                # the worker-dispatcher
                "batch-accept-limit" : 10,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 824
                # The maximal number of direct buffers kept in the direct buffer pool for
                # reuse.
                "direct-buffer-pool-limit" : 1000,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 820
                # The number of bytes per direct buffer in the pool used to read or write
                # network data from the kernel.
                "direct-buffer-size" : "128 KiB",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 857
                # Fully qualified config path which holds the dispatcher configuration
                # on which file IO tasks are scheduled
                "file-io-dispatcher" : "akka.actor.default-blocking-io-dispatcher",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 865
                # The maximum number of bytes (or "unlimited") to transfer in one batch
                # when using `WriteFile` command which uses `FileChannel.transferTo` to
                # pipe files to a TCP socket. On some OS like Linux `FileChannel.transferTo`
                # may block for a long time when network IO is faster than file IO.
                # Decreasing the value may improve fairness while increasing may improve
                # throughput.
                "file-io-transferTo-limit" : "512 KiB",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 870
                # The number of times to retry the `finishConnect` call after being notified about
                # OP_CONNECT. Retries are needed if the OP_CONNECT notification doesn't imply that
                # `finishConnect` will succeed, which is the case on Android.
                "finish-connect-retries" : 5,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 853
                # Fully qualified config path which holds the dispatcher configuration
                # for the selector management actors
                "management-dispatcher" : "akka.actor.default-dispatcher",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 806
                # Maximum number of open channels supported by this TCP module; there is
                # no intrinsic general limit, this setting is meant to enable DoS
                # protection by limiting the number of concurrently connected clients.
                # Also note that this is a "soft" limit; in certain cases the implementation
                # will accept a few connections more or a few less than the number configured
                # here. Must be an integer > 0 or "unlimited".
                "max-channels" : 256000,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 836
                # The maximum number of bytes delivered by a `Received` message. Before
                # more data is read from the network the connection actor will try to
                # do other work.
                # The purpose of this setting is to impose a smaller limit than the 
                # configured receive buffer size. When using value 'unlimited' it will
                # try to read all from the receive buffer.
                "max-received-message-size" : "unlimited",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 798
                # The number of selectors to stripe the served channels over; each of
                # these will use one select loop on the selector-dispatcher.
                "nr-of-selectors" : 1,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 828
                # The duration a connection actor waits for a `Register` message from
                # its commander before aborting the connection.
                "register-timeout" : "5s",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 811
                # When trying to assign a new connection to a selector and the chosen
                # selector is at full capacity, retry selector choosing and assignment
                # this many times before giving up
                "selector-association-retries" : 10,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 845
                # Fully qualified config path which holds the dispatcher configuration
                # to be used for running the select() calls in the selectors
                "selector-dispatcher" : "akka.io.pinned-dispatcher",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 841
                # Enable fine grained logging of what goes on inside the implementation.
                # Be aware that this may log more than once per message sent to the actors
                # of the tcp implementation.
                "trace-logging" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 879
                # On Windows connection aborts are not reliably detected unless an OP_READ is
                # registered on the selector _after_ the connection has been reset. This
                # workaround enables an OP_CONNECT which forces the abort to be visible on Windows.
                # Enabling this setting on other platforms than Windows will cause various failures
                # and undefined behavior.
                # Possible values of this key are on, off and auto where auto will enable the
                # workaround if Windows is detected automatically.
                "windows-connection-abort-workaround-enabled" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 849
                # Fully qualified config path which holds the dispatcher configuration
                # for the read/write worker actors
                "worker-dispatcher" : "akka.actor.default-dispatcher"
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 872
            "udp" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 918
                # The maximal number of direct buffers kept in the direct buffer pool for
                # reuse.
                "direct-buffer-pool-limit" : 1000,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 914
                # The number of bytes per direct buffer in the pool used to read or write
                # network data from the kernel.
                "direct-buffer-size" : "128 KiB",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 935
                # Fully qualified config path which holds the dispatcher configuration
                # for the selector management actors
                "management-dispatcher" : "akka.actor.default-dispatcher",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 891
                # Maximum number of open channels supported by this UDP module Generally
                # UDP does not require a large number of channels, therefore it is
                # recommended to keep this setting low.
                "max-channels" : 4096,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 886
                # The number of selectors to stripe the served channels over; each of
                # these will use one select loop on the selector-dispatcher.
                "nr-of-selectors" : 1,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 910
                # The maximum number of datagrams that are read in one go,
                # higher numbers decrease latency, lower numbers increase fairness on
                # the worker-dispatcher
                "receive-throughput" : 3,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 900
                # The select loop can be used in two modes:
                # - setting "infinite" will select without a timeout, hogging a thread
                # - setting a positive timeout will do a bounded select call,
                #   enabling sharing of a single thread between multiple selectors
                #   (in this case you will have to use a different configuration for the
                #   selector-dispatcher, e.g. using "type=Dispatcher" with size 1)
                # - setting it to zero means polling, i.e. calling selectNow()
                "select-timeout" : "infinite",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 905
                # When trying to assign a new connection to a selector and the chosen
                # selector is at full capacity, retry selector choosing and assignment
                # this many times before giving up
                "selector-association-retries" : 10,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 927
                # Fully qualified config path which holds the dispatcher configuration
                # to be used for running the select() calls in the selectors
                "selector-dispatcher" : "akka.io.pinned-dispatcher",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 923
                # Enable fine grained logging of what goes on inside the implementation.
                # Be aware that this may log more than once per message sent to the actors
                # of the tcp implementation.
                "trace-logging" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 931
                # Fully qualified config path which holds the dispatcher configuration
                # for the read/write worker actors
                "worker-dispatcher" : "akka.actor.default-dispatcher"
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 928
            "udp-connected" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 974
                # The maximal number of direct buffers kept in the direct buffer pool for
                # reuse.
                "direct-buffer-pool-limit" : 1000,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 970
                # The number of bytes per direct buffer in the pool used to read or write
                # network data from the kernel.
                "direct-buffer-size" : "128 KiB",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 991
                # Fully qualified config path which holds the dispatcher configuration
                # for the selector management actors
                "management-dispatcher" : "akka.actor.default-dispatcher",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 947
                # Maximum number of open channels supported by this UDP module Generally
                # UDP does not require a large number of channels, therefore it is
                # recommended to keep this setting low.
                "max-channels" : 4096,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 942
                # The number of selectors to stripe the served channels over; each of
                # these will use one select loop on the selector-dispatcher.
                "nr-of-selectors" : 1,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 966
                # The maximum number of datagrams that are read in one go,
                # higher numbers decrease latency, lower numbers increase fairness on
                # the worker-dispatcher
                "receive-throughput" : 3,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 956
                # The select loop can be used in two modes:
                # - setting "infinite" will select without a timeout, hogging a thread
                # - setting a positive timeout will do a bounded select call,
                #   enabling sharing of a single thread between multiple selectors
                #   (in this case you will have to use a different configuration for the
                #   selector-dispatcher, e.g. using "type=Dispatcher" with size 1)
                # - setting it to zero means polling, i.e. calling selectNow()
                "select-timeout" : "infinite",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 961
                # When trying to assign a new connection to a selector and the chosen
                # selector is at full capacity, retry selector choosing and assignment
                # this many times before giving up
                "selector-association-retries" : 10,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 983
                # Fully qualified config path which holds the dispatcher configuration
                # to be used for running the select() calls in the selectors
                "selector-dispatcher" : "akka.io.pinned-dispatcher",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 979
                # Enable fine grained logging of what goes on inside the implementation.
                # Be aware that this may log more than once per message sent to the actors
                # of the tcp implementation.
                "trace-logging" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 987
                # Fully qualified config path which holds the dispatcher configuration
                # for the read/write worker actors
                "worker-dispatcher" : "akka.actor.default-dispatcher"
            }
        },
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 82
        # JVM shutdown, System.exit(-1), in case of a fatal error,
        # such as OutOfMemoryError
        "jvm-exit-on-fatal-error" : "on",
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 70
        "library-extensions" : [],
        # application.conf @ file:/development/code/jonjack/akka-streams-playground/target/scala-2.12/classes/application.conf: 5
        # Logs all config on startup
        "log-config-on-start" : "on",
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 55
        # Log at info level when messages are sent to dead letters.
        # Possible values:
        # on: all dead letters are logged
        # off: no logging of dead letters
        # n: positive integer, number of dead letters that will be logged
        "log-dead-letters" : 10,
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 60
        # Possibility to turn off logging of dead letters while the actor system
        # is shutting down. Logging is only done when enabled by 'log-dead-letters'
        # setting.
        "log-dead-letters-during-shutdown" : "on",
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 34
        # Loggers are created and registered synchronously during ActorSystem
        # start-up, and since they are actors, this timeout is used to bound the
        # waiting time
        "logger-startup-timeout" : "5s",
        # application.conf @ file:/development/code/jonjack/akka-streams-playground/target/scala-2.12/classes/application.conf: 9
        # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
        # to STDOUT)
        "loggers" : [
            # application.conf @ file:/development/code/jonjack/akka-streams-playground/target/scala-2.12/classes/application.conf: 9
            "akka.event.slf4j.Slf4jLogger"
        ],
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 29
        # Specifies the default loggers dispatcher
        "loggers-dispatcher" : "akka.actor.default-dispatcher",
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 26
        # Filter of log events that is used by the LoggingAdapter before 
        # publishing log events to the eventStream. It can perform
        # fine grained filtering based on the log source. The default
        # implementation filters on the `loglevel`.
        # FQCN of the LoggingFilter. The Class of the FQCN must implement 
        # akka.event.LoggingFilter and have a public constructor with
        # (akka.actor.ActorSystem.Settings, akka.event.EventStream) parameters.
        "logging-filter" : "akka.event.DefaultLoggingFilter",
        # application.conf @ file:/development/code/jonjack/akka-streams-playground/target/scala-2.12/classes/application.conf: 14
        # Log level used by the configured loggers (see "loggers") as soon
        # as they have been started; before that, see "stdout-loglevel"
        # Options: OFF, ERROR, WARNING, INFO, DEBUG
        "loglevel" : "DEBUG",
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 739
        # Used to set the behavior of the scheduler.
        # Changing the default values may change the system behavior drastically so make
        # sure you know what you're doing! See the Scheduler section of the Akka
        # Documentation for more details.
        "scheduler" : {
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 775
            # This setting selects the timer implementation which shall be loaded at
            # system start-up.
            # The class given here must implement the akka.actor.Scheduler interface
            # and offer a public constructor which takes three arguments:
            #  1) com.typesafe.config.Config
            #  2) akka.event.LoggingAdapter
            #  3) java.util.concurrent.ThreadFactory
            "implementation" : "akka.actor.LightArrayRevolverScheduler",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 781
            # When shutting down the scheduler, there will typically be a thread which
            # needs to be stopped, and this timeout determines how long to wait for
            # that to happen. In case of timeout the shutdown of the actor system will
            # proceed without running possibly still enqueued tasks.
            "shutdown-timeout" : "5s",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 759
            # The LightArrayRevolverScheduler is used as the default scheduler in the
            # system. It does not execute the scheduled tasks on exact time, but on every
            # tick, it will run everything that is (over)due. You can increase or decrease
            # the accuracy of the execution timing by specifying smaller or larger tick
            # duration. If you are scheduling a lot of tasks you should consider increasing
            # the ticks per wheel.
            # Note that it might take up to 1 tick to stop the Timer, so setting the
            # tick-duration to a high value will make shutting down the actor system
            # take longer.
            "tick-duration" : "10ms",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/reference.conf: 766
            # The timer uses a circular wheel of buckets to store the timer tasks.
            # This should be set such that the majority of scheduled timeouts (for high
            # scheduling frequency) will be shorter than one rotation of the wheel
            # (ticks-per-wheel * ticks-duration)
            # THIS MUST BE A POWER OF TWO!
            "ticks-per-wheel" : 512
        },
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 94
        # configure overrides to ssl-configuration here (to be used by akka-streams, and akka-http – i.e. when serving https connections)
        "ssl-config" : {
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 95
            "protocol" : "TLSv1.2"
        },
        # application.conf @ file:/development/code/jonjack/akka-streams-playground/target/scala-2.12/classes/application.conf: 21
        # Log level for the very basic logger activated during ActorSystem startup.
        # This logger prints the log messages to stdout (System.out).
        # Options: OFF, ERROR, WARNING, INFO, DEBUG
        "stdout-loglevel" : "DEBUG",
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 6
        "stream" : {
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 80
            # Fully qualified config path which holds the dispatcher configuration
            # to be used by ActorMaterializer when creating Actors for IO operations,
            # such as FileSource, FileSink and others.
            "blocking-io-dispatcher" : "akka.stream.default-blocking-io-dispatcher",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 82
            "default-blocking-io-dispatcher" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 84
                "executor" : "thread-pool-executor",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 87
                "thread-pool-executor" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 88
                    "fixed-pool-size" : 16
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 85
                "throughput" : 1,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 83
                "type" : "Dispatcher"
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 9
            # Default materializer settings
            "materializer" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 48
                # Enable automatic fusing of all graphs that are run. For short-lived streams
                # this may cause an initial runtime overhead, but most of the time fusing is
                # desirable since it reduces the number of Actors that are created.
                # Deprecated, since Akka 2.5.0, setting does not have any effect.
                "auto-fusing" : "on",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 65
                "debug" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 73
                    # Enables the fuzzing mode which increases the chance of race conditions
                    # by aggressively reordering events and making certain operations more
                    # concurrent than usual.
                    # This setting is for testing purposes, NEVER enable this in a production
                    # environment!
                    # To get the best results, try combining this setting with a throughput
                    # of 1 on the corresponding dispatchers.
                    "fuzzing-mode" : "off"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 39
                # Enable additional troubleshooting logging at DEBUG log level
                "debug-logging" : "off",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 19
                # Fully qualified config path which holds the dispatcher configuration
                # to be used by ActorMaterializer when creating Actors.
                # When this value is left empty, the default-dispatcher will be used.
                "dispatcher" : "",
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 12
                # Initial size of buffers used in stream elements
                "initial-input-buffer-size" : 4,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 58
                # Those stream elements which have explicit buffers (like mapAsync, mapAsyncUnordered,
                # buffer, flatMapMerge, Source.actorRef, Source.queue, etc.) will preallocate a fixed
                # buffer upon stream materialization if the requested buffer size is less than this
                # configuration parameter. The default is very high because failing early is better
                # than failing under load.
                # 
                # Buffers sized larger than this will dynamically grow/shrink and consume more memory
                # per element than the fixed size buffers.
                "max-fixed-buffer-size" : 1000000000,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 14
                # Maximum size of buffers used in stream elements
                "max-input-buffer-size" : 16,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 42
                # Maximum number of elements emitted in batch if downstream signals large demand
                "output-burst-limit" : 1000,
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 23
                # Cleanup leaked publishers and subscribers when they are not used within a given
                # deadline
                "subscription-timeout" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 31
                    # when the subscription timeout is reached one of the following strategies on
                    # the "stale" publisher:
                    # cancel - cancel it (via `onError` or subscribing to the publisher and
                    #          `cancel()`ing the subscription right away
                    # warn   - log a warning statement about the stale element (then drop the
                    #          reference to it)
                    # noop   - do nothing (not recommended)
                    "mode" : "cancel",
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 35
                    # time after which a subscriber / publisher is considered stale and eligible
                    # for cancelation (see `akka.stream.subscription-timeout.mode`)
                    "timeout" : "5s"
                },
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 63
                # Maximum number of sync messages that actor can process for stream to substream communication.
                # Parameter allows to interrupt synchronous processing to get upsteam/downstream messages.
                # Allows to accelerate message processing that happening withing same actor but keep system responsive.
                "sync-processing-limit" : 1000
            }
        },
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 9
        "test" : {
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 25
            "calling-thread-dispatcher" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 26
                "type" : "akka.testkit.CallingThreadDispatcherConfigurator"
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 23
            # The timeout that is added as an implicit by DefaultTimeout trait
            "default-timeout" : "5s",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 16
            # duration of EventFilter.intercept waits after the block is finished until
            # all required messages are received
            "filter-leeway" : "3s",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 20
            # duration to wait in expectMsg and friends outside of within() block
            # by default
            "single-expect-default" : "3s",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar!/reference.conf: 12
            # factor by which to scale timeouts during tests, e.g. to account for shared
            # build system load
            "timefactor" : 1
        },
        # version.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar!/version.conf: 1
        "version" : "2.5.6"
    },
    # system properties
    "awt" : {
        # system properties
        "toolkit" : "sun.lwawt.macosx.LWCToolkit"
    },
    # system properties
    "file" : {
        # system properties
        "encoding" : {
            # system properties
            "pkg" : "sun.io"
        },
        # system properties
        "separator" : "/"
    },
    # system properties
    "ftp" : {
        # system properties
        "nonProxyHosts" : "local|*.local|169.254/16|*.169.254/16"
    },
    # system properties
    "gopherProxySet" : "false",
    # system properties
    "http" : {
        # system properties
        "nonProxyHosts" : "local|*.local|169.254/16|*.169.254/16"
    },
    # system properties
    "java" : {
        # system properties
        "awt" : {
            # system properties
            "graphicsenv" : "sun.awt.CGraphicsEnvironment",
            # system properties
            "printerjob" : "sun.lwawt.macosx.CPrinterJob"
        },
        # system properties
        "class" : {
            # system properties
            "path" : "/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/deploy.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/ext/cldrdata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/ext/dnsns.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/ext/jaccess.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/ext/jfxrt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/ext/localedata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/ext/nashorn.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/ext/sunec.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/ext/zipfs.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/javaws.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/jfxswt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/management-agent.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/plugin.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/lib/ant-javafx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/lib/dt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/lib/javafx-mx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/lib/jconsole.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/lib/packager.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/lib/sa-jdi.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/lib/tools.jar:/development/code/jonjack/akka-streams-playground/target/scala-2.12/classes:/Users/jonjack/.sbt/boot/scala-2.12.3/lib/scala-library.jar:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.5.6.jar:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar:/Users/jonjack/.ivy2/cache/com.typesafe/config/bundles/config-1.3.1.jar:/Users/jonjack/.ivy2/cache/org.reactivestreams/reactive-streams/jars/reactive-streams-1.0.1.jar:/Users/jonjack/.ivy2/cache/org.scala-lang.modules/scala-java8-compat_2.12/bundles/scala-java8-compat_2.12-0.8.0.jar:/Users/jonjack/.ivy2/cache/org.scala-lang.modules/scala-parser-combinators_2.12/bundles/scala-parser-combinators_2.12-1.0.4.jar:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.0.10.jar:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-spray-json_2.12/jars/akka-http-spray-json_2.12-10.0.10.jar:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http-testkit_2.12/jars/akka-http-testkit_2.12-10.0.10.jar:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-http_2.12/jars/akka-http_2.12-10.0.10.jar:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-parsing_2.12/jars/akka-parsing_2.12-10.0.10.jar:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream-testkit_2.12/jars/akka-stream-testkit_2.12-2.4.19.jar:/Users/jonjack/.ivy2/cache/io.spray/spray-json_2.12/bundles/spray-json_2.12-1.3.3.jar:/Users/jonjack/.ivy2/cache/ch.qos.logback/logback-classic/jars/logback-classic-1.2.3.jar:/Users/jonjack/.ivy2/cache/ch.qos.logback/logback-core/jars/logback-core-1.2.3.jar:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.6.jar:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-slf4j_2.12/jars/akka-slf4j_2.12-2.5.6.jar:/Users/jonjack/.ivy2/cache/org.slf4j/slf4j-api/jars/slf4j-api-1.7.25.jar:/Applications/IntelliJ IDEA CE.app/Contents/lib/idea_rt.jar",
            # system properties
            "version" : "52.0"
        },
        # system properties
        "endorsed" : {
            # system properties
            "dirs" : "/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/endorsed"
        },
        # system properties
        "ext" : {
            # system properties
            "dirs" : "/Users/jonjack/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"
        },
        # system properties
        "home" : "/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre",
        # system properties
        "io" : {
            # system properties
            "tmpdir" : "/var/folders/gk/z14mpddx2f77wg459mph_9780000gq/T/"
        },
        # system properties
        "library" : {
            # system properties
            "path" : "/Applications/oracle/product/instantclient_64/11.2.0.4.0:/Users/jonjack/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."
        },
        # system properties
        "runtime" : {
            # system properties
            "name" : "Java(TM) SE Runtime Environment",
            # system properties
            "version" : "1.8.0_131-b11"
        },
        # system properties
        "specification" : {
            # system properties
            "name" : "Java Platform API Specification",
            # system properties
            "vendor" : "Oracle Corporation",
            # system properties
            "version" : "1.8"
        },
        # system properties
        "vendor" : {
            # system properties
            "url" : {
                # system properties
                "bug" : "http://bugreport.sun.com/bugreport/"
            }
        },
        # system properties
        "version" : "1.8.0_131",
        # system properties
        "vm" : {
            # system properties
            "info" : "mixed mode",
            # system properties
            "name" : "Java HotSpot(TM) 64-Bit Server VM",
            # system properties
            "specification" : {
                # system properties
                "name" : "Java Virtual Machine Specification",
                # system properties
                "vendor" : "Oracle Corporation",
                # system properties
                "version" : "1.8"
            },
            # system properties
            "vendor" : "Oracle Corporation",
            # system properties
            "version" : "25.131-b11"
        }
    },
    # system properties
    "line" : {
        # system properties
        "separator" : "\n"
    },
    # system properties
    "os" : {
        # system properties
        "arch" : "x86_64",
        # system properties
        "name" : "Mac OS X",
        # system properties
        "version" : "10.10.3"
    },
    # system properties
    "path" : {
        # system properties
        "separator" : ":"
    },
    # system properties
    "socksNonProxyHosts" : "local|*.local|169.254/16|*.169.254/16",
    # merge of reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 101,reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 4
    # ssl configuration
    # folded in from former ssl-config-akka module
    # ssl configuration
    "ssl-config" : {
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 16
        # Whether revocation lists should be checked, if null, defaults to platform default setting.
        "checkRevocation" : null,
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 128
        # Debug configuration
        "debug" : {
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 131
            # Turn on all debugging
            "all" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 137
            # Turn certpath debugging on
            "certpath" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 155
            # Print hex dump of each handshake message, requires handshake to be true
            "data" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 167
            # Print default SSL initialization
            "defaultctx" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 152
            # Print each handshake message
            "handshake" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 161
            # Print key generation data
            "keygen" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 176
            # Print key manager tracing
            "keymanager" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 140
            # Turn ocsp debugging on
            "ocsp" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 149
            # print raw SSL/TLS packets, requires record to be true
            "packet" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 146
            # hex dump of record plaintext, requires record to be true
            "plaintext" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 182
            # Turn pluggability debugging on
            "pluggability" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 143
            # Enable per-record tracing
            "record" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 164
            # Print session activity
            "session" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 173
            # Print session cache tracing
            "sessioncache" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 134
            # Turn on ssl debugging
            "ssl" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 170
            # Print SSLContext tracing
            "sslctx" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 179
            # Print trust manager tracing
            "trustmanager" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 158
            # Enable verbose handshake message printing, requires handshake to be true
            "verbose" : false
        },
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 10
        # Whether we should use the default JVM SSL configuration or not
        # When false additional configuration will be applied on the context (as configured in ssl-config).
        "default" : false,
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 31
        # The disabled key algorithms
        "disabledKeyAlgorithms" : [
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 31
            "RSA keySize < 2048",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 31
            "DSA keySize < 2048",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 31
            "EC keySize < 224"
        ],
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 28
        # The disabled signature algorithms
        "disabledSignatureAlgorithms" : [
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 28
            "MD2",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 28
            "MD4",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 28
            "MD5"
        ],
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 22
        # The enabled cipher suites. If empty, uses the platform default.
        "enabledCipherSuites" : [],
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 25
        # The enabled protocols. If empty, uses the platform default.
        "enabledProtocols" : [
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 25
            "TLSv1.2",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 25
            "TLSv1.1",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 25
            "TLSv1"
        ],
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 39
        # The hostname verifier class.
        # If non null, should be the fully qualify classname of a class that imlpements HostnameVerifier,
        # otherwise the default will be used
        "hostnameVerifierClass" : null,
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 54
        # Configuration for the key manager
        "keyManager" : {
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 56
            # The key manager algorithm. If empty, uses the platform default.
            "algorithm" : null,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 62
            "prototype" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 62
                # The key stores should look like this
                "stores" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 70
                    # The data for the keystore. Either this must be non null, or path must be non null.
                    "data" : null,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 73
                    # The password for loading the keystore. If null, uses no password.
                    "password" : null,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 67
                    # The path to the keystore file. Either this must be non null, or data must be non null.
                    "path" : null,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 64
                    # The store type. If null, defaults to the platform default store type, ie JKS.
                    "type" : null
                }
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 59
            # The key stores
            "stores" : []
        },
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.6.jar!/reference.conf: 102
        "logger" : "com.typesafe.sslconfig.akka.util.AkkaLoggerBridge",
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 100
        # The loose ssl options.  These allow configuring ssl to be more loose about what it accepts,
        # at the cost of introducing potential security issues.
        "loose" : {
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 124
            # Whether any certificate should be accepted or not
            "acceptAnyCertificate" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 109
            # If non null, overrides the platform default for whether legacy hello messsages should be allowed.
            "allowLegacyHelloMessages" : null,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 112
            # If non null, overrides the platform defalut for whether unsafe renegotiation should be allowed.
            "allowUnsafeRenegotiation" : null,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 106
            # Whether weak ciphers should be allowed
            "allowWeakCiphers" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 103
            # Whether weak protocols should be allowed
            "allowWeakProtocols" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 115
            # Whether hostname verification should be disabled
            "disableHostnameVerification" : false,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 121
            # Whether the SNI (Server Name Indication) TLS extension should be disabled
            # This setting MAY be respected by client libraries.
            # 
            # https://tools.ietf.org/html/rfc3546#sectiom-3.1
            "disableSNI" : false
        },
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 13
        # The ssl protocol to use
        "protocol" : "TLSv1.2",
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 19
        # A sequence of URLs for obtaining revocation lists
        "revocationLists" : [],
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 41
        "sslParameters" : {
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 47
            # translates to a setNeedClientAuth / setWantClientAuth calls
            # "default" – leaves the (which for JDK8 means wantClientAuth and needClientAuth are set to false.)
            # "none"    – `setNeedClientAuth(false)`
            # "want"    – `setWantClientAuth(true)`
            # "need"    – `setNeedClientAuth(true)`
            "clientAuth" : "default",
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 50
            # protocols (names)
            "protocols" : []
        },
        # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 77
        "trustManager" : {
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 79
            # The trust manager algorithm. If empty, uses the platform default.
            "algorithm" : null,
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 85
            "prototype" : {
                # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 85
                # The key stores should look like this
                "stores" : {
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 93
                    # The data for the keystore. Either this must be non null, or path must be non null.
                    "data" : null,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 90
                    # The path to the keystore file. Either this must be non null, or data must be non null.
                    "path" : null,
                    # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 87
                    # The store type. If null, defaults to the platform default store type, ie JKS.
                    "type" : null
                }
            },
            # reference.conf @ jar:file:/Users/jonjack/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.2.jar!/reference.conf: 82
            # The trust stores
            "stores" : []
        }
    },
    # system properties
    "sun" : {
        # system properties
        "arch" : {
            # system properties
            "data" : {
                # system properties
                "model" : "64"
            }
        },
        # system properties
        "boot" : {
            # system properties
            "class" : {
                # system properties
                "path" : "/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/classes"
            },
            # system properties
            "library" : {
                # system properties
                "path" : "/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib"
            }
        },
        # system properties
        "cpu" : {
            # system properties
            "endian" : "little",
            # system properties
            "isalist" : ""
        },
        # system properties
        "io" : {
            # system properties
            "unicode" : {
                # system properties
                "encoding" : "UnicodeBig"
            }
        },
        # system properties
        "java" : {
            # system properties
            "command" : "streams.LogFlow",
            # system properties
            "launcher" : "SUN_STANDARD"
        },
        # system properties
        "jnu" : {
            # system properties
            "encoding" : "UTF-8"
        },
        # system properties
        "management" : {
            # system properties
            "compiler" : "HotSpot 64-Bit Tiered Compilers"
        },
        # system properties
        "os" : {
            # system properties
            "patch" : {
                # system properties
                "level" : "unknown"
            }
        }
    },
    # system properties
    "user" : {
        # system properties
        "country" : {
            # system properties
            "format" : "GB"
        },
        # system properties
        "dir" : "/development/code/jonjack/akka-streams-playground",
        # system properties
        "home" : "/Users/jonjack",
        # system properties
        "language" : "en",
        # system properties
        "name" : "jonjack",
        # system properties
        "timezone" : ""
    },
    # system properties
    "visualvm" : {
        # system properties
        "id" : "14805134691327"
    }
}

2017-10-17 17:09:44.080UTC DEBUG[LogFlow-akka.actor.default-dispatcher-3] s.LogFlow$ - LOGGED BY LOG
2017-10-17 17:09:44.081UTC INFO [LogFlow-akka.actor.default-dispatcher-3] s.LogFlow$ - LOGGED BY LOG
2017-10-17 17:09:44.081UTC INFO [LogFlow-akka.actor.default-dispatcher-3] c.t.c.i.SimpleConfig - LOGGED BY LOGGER
2017-10-17 17:09:44.081UTC DEBUG[LogFlow-akka.actor.default-dispatcher-3] c.t.c.i.SimpleConfig - LOGGED BY LOGGER
2017-10-17 17:09:44.172UTC DEBUG[LogFlow-akka.actor.default-dispatcher-3] a.s.Materializer - [hi] Element: 1
2017-10-17 17:09:44.172UTC DEBUG[LogFlow-akka.actor.default-dispatcher-3] a.s.Materializer - [hi] Element: 2
2017-10-17 17:09:44.172UTC DEBUG[LogFlow-akka.actor.default-dispatcher-3] a.s.Materializer - [hi] Element: 3
2017-10-17 17:09:44.172UTC DEBUG[LogFlow-akka.actor.default-dispatcher-3] a.s.Materializer - [hi] Element: 4
2017-10-17 17:09:44.172UTC DEBUG[LogFlow-akka.actor.default-dispatcher-3] a.s.Materializer - [hi] Element: 5
2017-10-17 17:09:44.173UTC DEBUG[LogFlow-akka.actor.default-dispatcher-3] a.s.Materializer - [hi] Upstream finished.
2017-10-17 17:09:44.189UTC DEBUG[LogFlow-akka.actor.default-dispatcher-4] a.e.EventStream - shutting down: StandardOutLogger started
